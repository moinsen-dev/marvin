{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Marvin: Transform PRDs into AI-Ready Tasks in Minutes","text":""},{"location":"#10x-your-development-speed","title":"\ud83d\ude80 10x Your Development Speed","text":"<p>Stop spending hours converting requirements into AI prompts. Marvin automatically transforms your Product Requirement Documents into structured, AI-optimized coding tasks.</p> <p>Get Started  Try the Demo </p>"},{"location":"#the-problem-we-solve","title":"\ud83c\udfaf The Problem We Solve","text":"\u274c Without Marvin\u2705 With Marvin <p>Manual Process Takes Hours:</p> <ol> <li>Read through lengthy PRD documents</li> <li>Manually extract features and requirements  </li> <li>Break down into development tasks</li> <li>Write detailed prompts for AI assistants</li> <li>Ensure consistency across tasks</li> <li>Manage dependencies manually</li> </ol> <p>Result: 4-6 hours of prep work before any coding begins</p> <pre><code>// Typical manual AI prompt\n\"Please implement a user authentication system. \nIt should have login and registration. \nMake it secure somehow.\"\n</code></pre> <p>Automated Process Takes Minutes:</p> <ol> <li>Drop your PRD into Marvin</li> <li>Get structured XML templates instantly</li> <li>Each task includes context, dependencies, and acceptance criteria</li> <li>Ready for Cursor, Windsurf, or Claude Code</li> </ol> <p>Result: From PRD to coding in under 5 minutes</p> <pre><code>&lt;!-- Marvin-generated task --&gt;\n&lt;task&gt;\n  &lt;title&gt;User Authentication System&lt;/title&gt;\n  &lt;context&gt;Implement secure auth with JWT tokens&lt;/context&gt;\n  &lt;dependencies&gt;Database setup, User model&lt;/dependencies&gt;\n  &lt;acceptance_criteria&gt;\n    - Password hashing with bcrypt\n    - JWT token generation/validation\n    - Rate limiting on login attempts\n  &lt;/acceptance_criteria&gt;\n&lt;/task&gt;\n</code></pre>"},{"location":"#real-impact","title":"\ud83d\udcca Real Impact","text":"<p>\u26a1 95% Faster Setup time: 4 hours \u2192 5 minutes</p> <p>\ud83c\udfaf 3x Better Quality Structured tasks with dependencies</p> <p>\ud83d\udd04 100% Consistent Same format every time</p> <p>\ud83e\udd16 AI-Optimized Works perfectly with all AI tools</p>"},{"location":"#see-it-in-action","title":"\ud83d\udd04 See It In Action","text":""},{"location":"#input-your-prd","title":"Input: Your PRD","text":"feature-request.md<pre><code># E-commerce Cart Feature\n\n## Overview\nUsers need ability to add products to cart and checkout\n\n## Requirements\n- Add/remove items from cart\n- Persist cart across sessions  \n- Calculate totals with tax\n- Integration with payment gateway\n- Email confirmations\n\n## Acceptance Criteria\n- Cart icon shows item count\n- Users can modify quantities\n- Secure checkout process\n</code></pre>"},{"location":"#marvin-magic-happens","title":"\u2b07\ufe0f Marvin Magic Happens \u2b07\ufe0f","text":""},{"location":"#output-ai-ready-tasks","title":"Output: AI-Ready Tasks","text":"Task 1: Cart ModelTask 2: Cart UITask 3: Checkout <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Implement Shopping Cart Data Model&lt;/title&gt;\n  &lt;priority&gt;high&lt;/priority&gt;\n  &lt;estimated_effort&gt;2-3 hours&lt;/estimated_effort&gt;\n\n  &lt;context&gt;\n    Create the foundational cart system that persists user \n    shopping sessions and handles item management.\n  &lt;/context&gt;\n\n  &lt;requirements&gt;\n    &lt;requirement&gt;Cart model with user association&lt;/requirement&gt;\n    &lt;requirement&gt;Cart items with product references&lt;/requirement&gt;\n    &lt;requirement&gt;Quantity and pricing calculations&lt;/requirement&gt;\n    &lt;requirement&gt;Session persistence mechanism&lt;/requirement&gt;\n  &lt;/requirements&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;User authentication system&lt;/dependency&gt;\n    &lt;dependency&gt;Product catalog database&lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Users can add products to cart&lt;/criterion&gt;\n    &lt;criterion&gt;Cart persists across browser sessions&lt;/criterion&gt;\n    &lt;criterion&gt;Accurate quantity and total calculations&lt;/criterion&gt;\n    &lt;criterion&gt;Cart associates with authenticated users&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n&lt;/coding_task&gt;\n</code></pre> <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Build Shopping Cart User Interface&lt;/title&gt;\n  &lt;priority&gt;high&lt;/priority&gt;\n  &lt;estimated_effort&gt;3-4 hours&lt;/estimated_effort&gt;\n\n  &lt;context&gt;\n    Create responsive cart interface with real-time updates \n    and smooth user experience.\n  &lt;/context&gt;\n\n  &lt;requirements&gt;\n    &lt;requirement&gt;Cart icon with item count badge&lt;/requirement&gt;\n    &lt;requirement&gt;Expandable cart preview&lt;/requirement&gt;\n    &lt;requirement&gt;Quantity modification controls&lt;/requirement&gt;\n    &lt;requirement&gt;Remove item functionality&lt;/requirement&gt;\n    &lt;requirement&gt;Real-time total calculations&lt;/requirement&gt;\n  &lt;/requirements&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;Cart data model (Task 1)&lt;/dependency&gt;\n    &lt;dependency&gt;Product display components&lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Cart icon displays correct item count&lt;/criterion&gt;\n    &lt;criterion&gt;Users can modify quantities inline&lt;/criterion&gt;\n    &lt;criterion&gt;Totals update immediately on changes&lt;/criterion&gt;\n    &lt;criterion&gt;Mobile-responsive design&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n&lt;/coding_task&gt;\n</code></pre> <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Secure Checkout Process&lt;/title&gt;\n  &lt;priority&gt;high&lt;/priority&gt;\n  &lt;estimated_effort&gt;4-5 hours&lt;/estimated_effort&gt;\n\n  &lt;context&gt;\n    Implement secure payment processing with tax calculation\n    and email confirmation system.\n  &lt;/context&gt;\n\n  &lt;requirements&gt;\n    &lt;requirement&gt;Multi-step checkout form&lt;/requirement&gt;\n    &lt;requirement&gt;Tax calculation by location&lt;/requirement&gt;\n    &lt;requirement&gt;Payment gateway integration&lt;/requirement&gt;\n    &lt;requirement&gt;Order confirmation emails&lt;/requirement&gt;\n    &lt;requirement&gt;Error handling and validation&lt;/requirement&gt;\n  &lt;/requirements&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;Cart functionality (Tasks 1-2)&lt;/dependency&gt;\n    &lt;dependency&gt;Payment gateway API&lt;/dependency&gt;\n    &lt;dependency&gt;Email service configuration&lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Secure payment processing&lt;/criterion&gt;\n    &lt;criterion&gt;Accurate tax calculations&lt;/criterion&gt;\n    &lt;criterion&gt;Confirmation emails sent&lt;/criterion&gt;\n    &lt;criterion&gt;Proper error handling&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n&lt;/coding_task&gt;\n</code></pre>"},{"location":"#perfect-for-these-teams","title":"\ud83c\udfaf Perfect For These Teams","text":""},{"location":"#startups","title":"\ud83d\ude80 Startups","text":"<p>\"Ship features 3x faster with AI assistance\"</p> <ul> <li>Convert investor requirements into development tasks</li> <li>Consistent quality across rapid iterations  </li> <li>Perfect for small teams wearing multiple hats</li> <li>Reduce onboarding time for new developers</li> </ul> <p>ROI: Save 20+ hours per feature release</p>"},{"location":"#enterprise-teams","title":"\ud83c\udfe2 Enterprise Teams","text":"<p>\"Standardize AI-assisted development at scale\"</p> <ul> <li>Consistent task formatting across teams</li> <li>Maintain quality standards with structured templates</li> <li>Easy integration with existing workflows</li> <li>Audit trail for requirement traceability</li> </ul> <p>ROI: 40% reduction in project planning time</p>"},{"location":"#product-managers","title":"\ud83d\udc65 Product Managers","text":"<p>\"Bridge the gap between requirements and code\"</p> <ul> <li>No more lost-in-translation issues</li> <li>Clear acceptance criteria for every task</li> <li>Dependency tracking prevents bottlenecks</li> <li>Easy to review and validate outputs</li> </ul> <p>ROI: 60% fewer requirement clarification meetings</p>"},{"location":"#ai-first-teams","title":"\ud83e\udd16 AI-First Teams","text":"<p>\"Maximize your AI coding tool effectiveness\"</p> <ul> <li>Optimized prompts for Cursor, Windsurf, Claude Code</li> <li>Structured context for better AI understanding</li> <li>Consistent format improves AI output quality</li> <li>Seamless integration with existing AI workflows</li> </ul> <p>ROI: 2-3x better AI-generated code quality</p>"},{"location":"#how-marvin-compares","title":"\ud83c\udd9a How Marvin Compares","text":"Manual Process Linear/Notion Marvin Time to AI-ready tasks 4-6 hours 2-3 hours \u26a1 5 minutes AI optimization \u274c Generic prompts \u274c Not AI-focused \u2705 Perfect for AI tools Dependency tracking \u274c Manual effort \u26a0\ufe0f Basic linking \u2705 Automatic resolution Consistency \u274c Varies by person \u26a0\ufe0f Template dependent \u2705 Always structured Integration \u274c Copy/paste workflow \u274c Platform locked \u2705 Works everywhere Cost \ud83d\udc64 Developer time \ud83d\udcb0 Monthly subscription \ud83c\udd93 Open source"},{"location":"#get-started-in-60-seconds","title":"\ud83d\ude80 Get Started in 60 Seconds","text":"1. Install Marvin<pre><code># Clone and install\ngit clone https://github.com/moinsen-dev/marvin.git\ncd marvin &amp;&amp; uv pip install -e .\n</code></pre> 2. Process Your First PRD<pre><code># Transform PRD to AI tasks\nmarvin process examples/prd/example_prd.md --output ./tasks/\n</code></pre> 3. Use with Your AI Tool<pre><code># Copy the generated XML into Cursor, Windsurf, or Claude Code\n# Start coding immediately with perfect context!\n</code></pre> <p>Full Installation Guide \u2192 Try the Demo \u2192</p>"},{"location":"#what-makes-marvin-special","title":"\ud83c\udf1f What Makes Marvin Special","text":""},{"location":"#ai-native-design","title":"\ud83e\udde0 AI-Native Design","text":"<p>Built from the ground up for AI coding assistants. Every output is optimized for tools like Cursor, Windsurf, and Claude Code.</p>"},{"location":"#smart-dependencies","title":"\ud83d\udd17 Smart Dependencies","text":"<p>Automatically identifies task dependencies and suggests optimal execution order. No more blocked developers.</p>"},{"location":"#codebase-aware","title":"\ud83d\udcca Codebase Aware","text":"<p>Scans your existing codebase to ensure generated tasks align with your architecture and patterns.</p>"},{"location":"#multiple-interfaces","title":"\u26a1 Multiple Interfaces","text":"<p>CLI for automation, REST API for integration, MCP server for collaboration. Use however fits your workflow.</p>"},{"location":"#highly-configurable","title":"\ud83d\udd27 Highly Configurable","text":"<p>Customize templates, add your own agents, modify output formats. Make Marvin work exactly how you need.</p>"},{"location":"#production-ready","title":"\ud83d\udcc8 Production Ready","text":"<p>Test-driven development, comprehensive documentation, enterprise-grade architecture. Ready for serious projects.</p>"},{"location":"#see-it-live","title":"\ud83c\udfac See It Live","text":"<p>\ud83c\udfa5 Interactive Demo Coming Soon</p> <p>We're building an interactive demo where you can paste your own PRD and see Marvin generate tasks in real-time. </p> <p>Want early access? Join our Discord to be notified when it's ready!</p> <p>For now, try these examples:</p> <ul> <li>E-commerce Cart Feature \u2192 Generated Tasks</li> <li>User Authentication System \u2192 Generated Tasks </li> <li>Dashboard Analytics \u2192 Generated Tasks</li> </ul>"},{"location":"#what-developers-say","title":"\ud83d\udcac What Developers Say","text":"<p>\"Marvin transformed our development workflow. We went from spending entire mornings on task breakdown to having AI-ready prompts in minutes.\" \u2014 Sarah Chen, Tech Lead @ StartupCo</p> <p>\"The dependency resolution alone saves us hours. No more developers waiting because tasks weren't properly sequenced.\" \u2014 Marcus Rodriguez, Principal Engineer @ TechCorp</p> <p>\"Our AI-generated code quality improved dramatically once we started using Marvin's structured prompts.\" \u2014 Alex Kim, Senior Developer @ InnovateLabs</p>"},{"location":"#join-the-community","title":"\ud83e\udd1d Join the Community","text":""},{"location":"#github","title":"\ud83d\udc19 GitHub","text":"<p>Star the repo, report issues, contribute code github.com/moinsen-dev/marvin</p>"},{"location":"#discord","title":"\ud83d\udcac Discord","text":"<p>Get help, share examples, connect with other users discord.gg/marvin</p>"},{"location":"#twitter","title":"\ud83d\udc26 Twitter","text":"<p>Follow for updates and tips @marvin_tool</p>"},{"location":"#ready-to-transform-your-workflow","title":"\ud83d\ude80 Ready to Transform Your Workflow?","text":"<p>Don't spend another day manually converting requirements into AI prompts. Join hundreds of developers who've already transformed their workflow with Marvin.</p> <p>Start Free Today View Documentation</p> <p>\u2728 Open source \u2022 \u26a1 No vendor lock-in \u2022 \ud83c\udd93 Always free</p> <p>Built with \u2764\ufe0f by developers, for developers</p> <p>Questions? hello@marvin.dev \u2022 Documentation \u2022 Contributing</p>"},{"location":"DOCUMENTATION_STATE_TRACKER/","title":"Documentation State Tracker","text":""},{"location":"DOCUMENTATION_STATE_TRACKER/#overview","title":"Overview","text":"<p>This document tracks the implementation of comprehensive documentation for Marvin using MkDocs and GitHub Pages.</p> <p>Documentation URL (once deployed): https://[username].github.io/marvin/</p> <p>Documentation Tool: MkDocs with Material theme - Why MkDocs?    - Native markdown support (aligns with existing docs)   - Excellent Python project integration   - Beautiful Material Design theme   - Built-in search functionality   - Easy GitHub Pages deployment   - API documentation generation support</p>"},{"location":"DOCUMENTATION_STATE_TRACKER/#implementation-status","title":"Implementation Status","text":""},{"location":"DOCUMENTATION_STATE_TRACKER/#not-started-in-progress-complete","title":"\ud83d\udd34 Not Started | \ud83d\udfe1 In Progress | \ud83d\udfe2 Complete","text":""},{"location":"DOCUMENTATION_STATE_TRACKER/#phase-1-foundation-setup","title":"Phase 1: Foundation Setup","text":"<ul> <li> \ud83d\udd34 MkDocs Configuration</li> <li> Install MkDocs and Material theme dependencies</li> <li> Create <code>mkdocs.yml</code> configuration</li> <li> Set up Material theme with custom branding</li> <li> Configure navigation structure</li> <li> Enable search functionality</li> <li> <p> Configure syntax highlighting for code blocks</p> </li> <li> <p> \ud83d\udd34 GitHub Actions Workflow</p> </li> <li> Create <code>.github/workflows/docs.yml</code></li> <li> Configure build on merge to main/develop</li> <li> Set up GitHub Pages deployment</li> <li> Add build status badge to README</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#phase-2-documentation-structure","title":"Phase 2: Documentation Structure","text":"<ul> <li> \ud83d\udd34 Home Page (<code>docs/index.md</code>)</li> <li> Project overview and key features</li> <li> Quick start guide</li> <li> Installation instructions</li> <li> <p> Links to main sections</p> </li> <li> <p> \ud83d\udd34 Getting Started (<code>docs/getting-started/</code>)</p> </li> <li> Installation guide (from INSTALL.md)</li> <li> Quick start tutorial</li> <li> Basic usage examples</li> <li> <p> Configuration options</p> </li> <li> <p> \ud83d\udd34 User Guide (<code>docs/user-guide/</code>)</p> </li> <li> Processing PRDs</li> <li> Understanding generated templates</li> <li> Using with AI coding assistants</li> <li> API usage guide</li> <li> <p> CLI reference</p> </li> <li> <p> \ud83d\udd34 Architecture (<code>docs/architecture/</code>)</p> </li> <li> System overview (from existing docs)</li> <li> Hexagonal architecture explanation</li> <li> Agent system design</li> <li> Data flow diagrams</li> <li> <p> Component interactions</p> </li> <li> <p> \ud83d\udd34 Developer Guide (<code>docs/developer-guide/</code>)</p> </li> <li> Development setup (from CLAUDE.md)</li> <li> TDD workflow guide</li> <li> Code quality standards</li> <li> Testing guidelines</li> <li> <p> Contributing guidelines</p> </li> <li> <p> \ud83d\udd34 API Reference (<code>docs/api/</code>)</p> </li> <li> Auto-generated from docstrings</li> <li> Core domain models</li> <li> Agent interfaces</li> <li> Use cases documentation</li> <li> REST API endpoints</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#phase-3-content-migration","title":"Phase 3: Content Migration","text":"<ul> <li> \ud83d\udd34 Migrate Existing Documentation</li> <li> README.md \u2192 Overview sections</li> <li> INSTALL.md \u2192 Getting started</li> <li> CLAUDE.md \u2192 Developer guide</li> <li> PRD.md \u2192 Architecture/Design</li> <li> STATE_TRACKER.md \u2192 Developer guide</li> <li> Template usage guide \u2192 User guide</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#phase-4-enhancements","title":"Phase 4: Enhancements","text":"<ul> <li> \ud83d\udd34 Interactive Features</li> <li> Code examples with copy buttons</li> <li> Mermaid diagrams for architecture</li> <li> Interactive API explorer</li> <li> <p> Search functionality optimization</p> </li> <li> <p> \ud83d\udd34 Automation</p> </li> <li> API docs auto-generation from code</li> <li> Changelog integration</li> <li> Version selector</li> <li> PDF export option</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#mkdocs-configuration-plan","title":"MkDocs Configuration Plan","text":""},{"location":"DOCUMENTATION_STATE_TRACKER/#directory-structure","title":"Directory Structure","text":"<pre><code>marvin/\n\u251c\u2500\u2500 mkdocs.yml                 # MkDocs configuration\n\u251c\u2500\u2500 docs/                      # Documentation source\n\u2502   \u251c\u2500\u2500 index.md              # Home page\n\u2502   \u251c\u2500\u2500 getting-started/      # Getting started section\n\u2502   \u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u2502   \u251c\u2500\u2500 quickstart.md\n\u2502   \u2502   \u2514\u2500\u2500 configuration.md\n\u2502   \u251c\u2500\u2500 user-guide/           # User guide section\n\u2502   \u2502   \u251c\u2500\u2500 processing-prds.md\n\u2502   \u2502   \u251c\u2500\u2500 templates.md\n\u2502   \u2502   \u251c\u2500\u2500 cli-usage.md\n\u2502   \u2502   \u2514\u2500\u2500 api-usage.md\n\u2502   \u251c\u2500\u2500 architecture/         # Architecture docs\n\u2502   \u2502   \u251c\u2500\u2500 overview.md\n\u2502   \u2502   \u251c\u2500\u2500 agents.md\n\u2502   \u2502   \u2514\u2500\u2500 data-flow.md\n\u2502   \u251c\u2500\u2500 developer-guide/      # Developer docs\n\u2502   \u2502   \u251c\u2500\u2500 setup.md\n\u2502   \u2502   \u251c\u2500\u2500 tdd-workflow.md\n\u2502   \u2502   \u251c\u2500\u2500 testing.md\n\u2502   \u2502   \u2514\u2500\u2500 contributing.md\n\u2502   \u2514\u2500\u2500 api/                  # API reference\n\u2502       \u2514\u2500\u2500 reference.md\n\u251c\u2500\u2500 site/                     # Generated site (git-ignored)\n\u2514\u2500\u2500 .github/\n    \u2514\u2500\u2500 workflows/\n        \u2514\u2500\u2500 docs.yml          # GitHub Actions workflow\n</code></pre>"},{"location":"DOCUMENTATION_STATE_TRACKER/#theme-configuration","title":"Theme Configuration","text":"<ul> <li>Primary color: Deep Blue (#1976D2)</li> <li>Accent color: Orange (#FF9800)</li> <li>Font: Roboto (headers), Roboto Mono (code)</li> <li>Features:</li> <li>Dark/light mode toggle</li> <li>Instant loading</li> <li>Search suggestions</li> <li>Navigation tabs</li> <li>Table of contents</li> <li>Back to top button</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#github-pages-deployment","title":"GitHub Pages Deployment","text":""},{"location":"DOCUMENTATION_STATE_TRACKER/#workflow-features","title":"Workflow Features","text":"<ol> <li>Trigger: On push to main branch</li> <li>Build: Using Python 3.11 and latest MkDocs</li> <li>Deploy: To gh-pages branch</li> <li>URL: https://[username].github.io/marvin/</li> </ol>"},{"location":"DOCUMENTATION_STATE_TRACKER/#security-considerations","title":"Security Considerations","text":"<ul> <li>Use GitHub token for deployment</li> <li>Build only from protected branches</li> <li>Review PRs before merge</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#success-metrics","title":"Success Metrics","text":"<ul> <li> Documentation builds without errors</li> <li> All existing docs integrated</li> <li> Search functionality works</li> <li> Mobile-responsive design</li> <li> Page load time &lt; 2 seconds</li> <li> API docs auto-generated</li> <li> GitHub workflow runs successfully</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#timeline","title":"Timeline","text":"<ul> <li>Week 1: Foundation setup (MkDocs config, GitHub workflow)</li> <li>Week 2: Structure creation and content migration</li> <li>Week 3: API documentation and enhancements</li> <li>Week 4: Review, polish, and launch</li> </ul>"},{"location":"DOCUMENTATION_STATE_TRACKER/#resources","title":"Resources","text":"<ul> <li>MkDocs Documentation</li> <li>Material for MkDocs</li> <li>GitHub Pages Documentation</li> <li>MkDocs GitHub Actions</li> </ul>"},{"location":"PRD/","title":"Product Requirements Document: Marvin","text":"<p>Version 1.0 | 2025-05-08</p>"},{"location":"PRD/#1-overview","title":"1. Overview","text":"<p>Marvin is an intelligent tool for converting Product Requirements Documents (PRDs) into structured AI-Coding-Tasks. Named after the paranoid-depressive robot from \"The Hitchhiker's Guide to the Galaxy,\" Marvin helps developers organize their projects and effectively use AI coding assistants (like Cursor, Windsurf, or Claude Code).</p>"},{"location":"PRD/#2-product-vision","title":"2. Product Vision","text":"<p>Marvin enables developers to maximize the power of AI coding assistants by providing a structured method to break down complex software requirements into well-formed task sequences. These tasks are provided in an XML format that can be optimally processed by AI assistants.</p>"},{"location":"PRD/#3-target-audience","title":"3. Target Audience","text":"<ul> <li>Software developers working with AI coding assistants</li> <li>Project managers who want to convert requirements into actionable tasks</li> <li>Teams seeking a structured approach for incremental product development</li> </ul>"},{"location":"PRD/#4-solution-approach","title":"4. Solution Approach","text":"<p>Marvin uses an agent-based approach with four core components:</p> <ol> <li>PRD Analysis: Extraction of features and requirements from unstructured documents</li> <li>Codebase Scanning: Understanding existing projects for seamless feature integration</li> <li>Task Template Generation: Creation of XML-based templates for AI coding assistants</li> <li>Sequence Planning: Optimal arrangement of tasks based on dependencies</li> </ol>"},{"location":"PRD/#5-system-architecture","title":"5. System Architecture","text":"<p>Marvin uses a Hexagonal Architecture (Ports &amp; Adapters) with:</p> <ul> <li>Core Domain: Business logic and domain models</li> <li>Adapters: Various access methods (CLI, API, MCP server)</li> <li>Infrastructure: Technical implementations for parsers, analyzers, etc.</li> <li>Agents: Specialized AI components for various tasks</li> </ul>"},{"location":"PRD/#6-functional-requirements","title":"6. Functional Requirements","text":""},{"location":"PRD/#61-prd-analysis","title":"6.1 PRD Analysis","text":"<ul> <li>PRD-01: Marvin can read and analyze text-based PRDs (Markdown, Docs, PDF)</li> <li>PRD-02: Marvin extracts features, requirements, and dependencies from PRDs</li> <li>PRD-03: Marvin recognizes priorities and effort estimates, if present</li> </ul>"},{"location":"PRD/#62-codebase-scanning","title":"6.2 Codebase Scanning","text":"<ul> <li>CBS-01: Marvin can scan and understand existing codebases</li> <li>CBS-02: Marvin identifies architecture patterns and components</li> <li>CBS-03: Marvin recognizes technologies, frameworks, and libraries used</li> <li>CBS-04: Marvin can analyze code dependencies</li> </ul>"},{"location":"PRD/#63-template-generation","title":"6.3 Template Generation","text":"<ul> <li>TPL-01: Marvin creates XML-based task templates according to specifications</li> <li>TPL-02: Marvin automatically fills templates with relevant information from PRD and codebase</li> <li>TPL-03: Marvin generates descriptive TaskIDs and unique sequence numbers</li> </ul>"},{"location":"PRD/#64-sequence-planning","title":"6.4 Sequence Planning","text":"<ul> <li>SEQ-01: Marvin plans optimal implementation sequences based on dependencies</li> <li>SEQ-02: Marvin recognizes and resolves conflicts between dependent tasks</li> <li>SEQ-03: Marvin allows manual adjustment of sequences</li> </ul>"},{"location":"PRD/#65-interfaces","title":"6.5 Interfaces","text":"<ul> <li>INT-01: Marvin provides a CLI for local use by developers</li> <li>INT-02: Marvin provides a REST API for integrations</li> <li>INT-03: Marvin provides an MCP server for collaborative use</li> </ul>"},{"location":"PRD/#7-non-functional-requirements","title":"7. Non-Functional Requirements","text":""},{"location":"PRD/#71-performance","title":"7.1 Performance","text":"<ul> <li>PERF-01: Analysis of a PRD with 20 features &lt; 30 seconds</li> <li>PERF-02: Codebase scanning &lt; 1 minute per 10,000 LOC</li> </ul>"},{"location":"PRD/#72-scalability","title":"7.2 Scalability","text":"<ul> <li>SCAL-01: Support for PRDs with up to 100 features</li> <li>SCAL-02: Support for codebases with up to 500,000 LOC</li> </ul>"},{"location":"PRD/#73-security","title":"7.3 Security","text":"<ul> <li>SEC-01: No unencrypted data in external storage</li> <li>SEC-02: API authentication with JWT</li> <li>SEC-03: Rate limiting for all endpoints</li> </ul>"},{"location":"PRD/#74-usability","title":"7.4 Usability","text":"<ul> <li>USE-01: Intuitive CLI commands with meaningful help texts</li> <li>USE-02: Detailed progress indicators for lengthy operations</li> <li>USE-03: Structured and understandable error messages</li> </ul>"},{"location":"PRD/#8-technology-and-integration-requirements","title":"8. Technology and Integration Requirements","text":""},{"location":"PRD/#81-ai-integration","title":"8.1 AI Integration","text":"<ul> <li>AI-01: Integration with Google ADK for agent implementation</li> <li>AI-02: Use of Context 7 for deep code understanding</li> <li>AI-03: Possibility of offline use with local LLMs</li> </ul>"},{"location":"PRD/#82-devops-integration","title":"8.2 DevOps Integration","text":"<ul> <li>DEV-01: Deployment as Docker container</li> <li>DEV-02: CI/CD pipeline for continuous testing and deployment</li> <li>DEV-03: API endpoints for common CI/CD systems</li> </ul>"},{"location":"PRD/#9-project-planning","title":"9. Project Planning","text":""},{"location":"PRD/#91-mvp-minimal-viable-product","title":"9.1 MVP (Minimal Viable Product)","text":"<p>Phase 1: - Basic project structure - Implement domain models - Simple PRD analysis with Regex/NLP - Basic template generation - CLI interface</p> <p>Phase 2: - Integration with Context 7 - Improved PRD parser with LLM - Implement sequence planner - Simple API with FastAPI</p>"},{"location":"PRD/#92-full-version","title":"9.2 Full Version","text":"<ul> <li>Integration with Google ADK</li> <li>Complete agent implementation</li> <li>MCP server</li> <li>Extensive tests and documentation</li> </ul>"},{"location":"PRD/#93-extensions","title":"9.3 Extensions","text":"<ul> <li>Integration with CI/CD systems</li> <li>AI-based improvement suggestions for tasks</li> <li>Multi-project support</li> <li>Collaborative features</li> </ul>"},{"location":"PRD/#10-assumptions-and-limitations","title":"10. Assumptions and Limitations","text":"<ul> <li>Marvin requires Python 3.11 or higher</li> <li>An internet connection is recommended for optimal results</li> <li>Local LLM usage significantly increases hardware requirements</li> </ul>"},{"location":"PRD/#11-glossary","title":"11. Glossary","text":"<ul> <li>PRD: Product Requirements Document</li> <li>ADK: Agent Development Kit (Google)</li> <li>MCP: Master Control Program (server for collaborative use)</li> <li>LLM: Large Language Model</li> <li>Task: A single, clearly defined development task</li> </ul>"},{"location":"STATE_TRACKER/","title":"Marvin Project State Tracker","text":"<p>Last Updated: 2025-05-28 Current Version: 0.1.0 (Early Development)</p>"},{"location":"STATE_TRACKER/#implementation-status-overview","title":"\ud83d\udcca Implementation Status Overview","text":""},{"location":"STATE_TRACKER/#implemented-components","title":"\u2705 Implemented Components","text":""},{"location":"STATE_TRACKER/#1-core-domain-models-100","title":"1. Core Domain Models (100%)","text":"<ul> <li>\u2705 Feature model with status tracking</li> <li>\u2705 PRD model with version control</li> <li>\u2705 Codebase model with component tracking</li> <li>\u2705 Task model with dependencies</li> <li>\u2705 Workflow model for sequencing</li> <li>\u2705 Full unit test coverage for all models</li> </ul>"},{"location":"STATE_TRACKER/#2-development-infrastructure-100","title":"2. Development Infrastructure (100%) \ud83c\udd95","text":"<ul> <li>\u2705 Test-Driven Development (TDD) workflow established</li> <li>\u2705 Comprehensive testing infrastructure with pytest</li> <li>\u2705 Code quality automation (Black, isort, Ruff, mypy)</li> <li>\u2705 Coverage reporting configured</li> <li>\u2705 check_code.sh script for automated quality checks</li> <li>\u2705 Test fixtures and conftest.py setup</li> <li>\u2705 uv package manager fully integrated</li> </ul>"},{"location":"STATE_TRACKER/#3-basic-agent-structure-60","title":"3. Basic Agent Structure (60%)","text":"<ul> <li>\u2705 Main orchestration agent (ADK-based)</li> <li>\u2705 PRD analysis agent skeleton</li> <li>\u2705 Codebase scanner agent skeleton</li> <li>\u2705 Template generator agent skeleton</li> <li>\u2705 Sequence planner agent skeleton</li> <li>\u26a0\ufe0f Agents have basic structure but lack full implementation</li> </ul>"},{"location":"STATE_TRACKER/#4-adk-integration-30","title":"4. ADK Integration (30%)","text":"<ul> <li>\u2705 DocumentAnalyzerADKAgent implementation</li> <li>\u2705 Basic ADK agent framework setup</li> <li>\u274c Full ADK agent implementation for all components</li> <li>\u274c ADK evaluation and testing framework</li> </ul>"},{"location":"STATE_TRACKER/#5-cli-interface-80","title":"5. CLI Interface (80%)","text":"<ul> <li>\u2705 Basic CLI structure with argparse</li> <li>\u2705 Process command implementation</li> <li>\u2705 Server command implementation</li> <li>\u274c MCP server command</li> <li>\u274c Advanced CLI features (progress bars, colored output)</li> </ul>"},{"location":"STATE_TRACKER/#6-api-server-70","title":"6. API Server (70%)","text":"<ul> <li>\u2705 FastAPI server setup</li> <li>\u2705 Process endpoint</li> <li>\u2705 Health check endpoint</li> <li>\u274c Authentication/Authorization</li> <li>\u274c Rate limiting</li> <li>\u274c WebSocket support for real-time updates</li> </ul>"},{"location":"STATE_TRACKER/#missing-components","title":"\u274c Missing Components","text":""},{"location":"STATE_TRACKER/#1-prd-analysis-prd-01-to-prd-03","title":"1. PRD Analysis (PRD-01 to PRD-03)","text":"<ul> <li>\u26a0\ufe0f Basic Markdown parsing skeleton exists</li> <li>\u274c Robust feature extraction from Markdown</li> <li>\u274c PDF parsing support</li> <li>\u274c Word document parsing support</li> <li>\u274c Advanced NLP-based feature extraction</li> <li>\u274c Priority and effort estimation extraction</li> <li>\u274c Dependency graph construction</li> </ul>"},{"location":"STATE_TRACKER/#2-codebase-scanning-cbs-01-to-cbs-04","title":"2. Codebase Scanning (CBS-01 to CBS-04)","text":"<ul> <li>\u26a0\ufe0f Basic directory scanning implemented</li> <li>\u274c Deep code analysis with AST parsing</li> <li>\u274c Architecture pattern recognition</li> <li>\u274c Framework/library detection</li> <li>\u274c Dependency analysis</li> <li>\u274c Code quality metrics</li> </ul>"},{"location":"STATE_TRACKER/#3-template-generation-tpl-01-to-tpl-03","title":"3. Template Generation (TPL-01 to TPL-03)","text":"<ul> <li>\u26a0\ufe0f XMLGenerator class structure exists</li> <li>\u274c Full XML template generation using provided template</li> <li>\u274c Template population from domain models</li> <li>\u274c Template validation</li> <li>\u274c Multiple template format support</li> </ul>"},{"location":"STATE_TRACKER/#4-sequence-planning-seq-01-to-seq-03","title":"4. Sequence Planning (SEQ-01 to SEQ-03)","text":"<ul> <li>\u26a0\ufe0f Basic topological sort implemented</li> <li>\u274c Advanced dependency resolution</li> <li>\u274c Conflict detection and resolution</li> <li>\u274c Manual adjustment interface</li> <li>\u274c Optimization algorithms</li> </ul>"},{"location":"STATE_TRACKER/#5-infrastructure","title":"5. Infrastructure","text":"<ul> <li>\u274c MCP server implementation (skeleton exists)</li> <li>\u274c Authentication system</li> <li>\u26a0\ufe0f Logging with Loguru (partially implemented)</li> <li>\u274c Configuration management</li> <li>\u274c Database integration</li> <li>\u274c Caching layer</li> </ul>"},{"location":"STATE_TRACKER/#updated-implementation-plan","title":"\ud83d\ude80 Updated Implementation Plan","text":""},{"location":"STATE_TRACKER/#immediate-next-steps-following-tdd","title":"\ud83c\udfaf Immediate Next Steps (Following TDD)","text":""},{"location":"STATE_TRACKER/#1-complete-documentanalysisagent-2-3-days","title":"1. Complete DocumentAnalysisAgent (2-3 days) \u2705","text":"<pre><code># TDD Steps:\n1. Write test_analyze_markdown_extracts_features() - RED \u2705\n2. Implement feature extraction logic - GREEN \u2705\n3. Run ./check_code.sh \u2705\n4. Write test_analyze_markdown_parses_dependencies() - RED \u2705\n5. Implement dependency parsing - GREEN \u2705\n6. Run ./check_code.sh \u2705\n</code></pre> <p>Tasks: - [x] Test &amp; implement robust Markdown section parsing \u2705 - [x] Test &amp; implement feature extraction with regex patterns \u2705 - [x] Test &amp; implement requirement parsing \u2705 - [x] Test &amp; implement dependency detection \u2705 - [x] Test &amp; implement metadata extraction (version, author) \u2705</p>"},{"location":"STATE_TRACKER/#2-implement-xmlgenerator-2-3-days","title":"2. Implement XMLGenerator (2-3 days) \u2705","text":"<pre><code># TDD Steps:\n1. Write test_generate_task_template_creates_valid_xml() - RED \u2705\n2. Implement basic XML generation - GREEN \u2705\n3. Run ./check_code.sh \u2705\n4. Write test_populate_template_from_models() - RED \u2705\n5. Implement template population - GREEN \u2705\n6. Run ./check_code.sh \u2705\n</code></pre> <p>Tasks: - [x] Test &amp; implement XML structure generation \u2705 - [x] Test &amp; implement template field population \u2705 - [x] Test &amp; implement user story generation \u2705 - [x] Test &amp; implement technology stack section \u2705 - [x] Test &amp; implement XML validation \u2705</p>"},{"location":"STATE_TRACKER/#3-wire-up-agents-1-2-days","title":"3. Wire up agents (1-2 days) \u2705","text":"<pre><code># TDD Steps:\n1. Write integration test for PRD \u2192 Template flow - RED \u2705\n2. Connect DocumentAnalysisAgent to XMLGenerator - GREEN \u2705\n3. Run ./check_code.sh \u2705\n4. Write test for agent communication - RED \u2705\n5. Implement proper integration flows - GREEN \u2705\n6. Run ./check_code.sh \u2705\n</code></pre> <p>Tasks: - [x] Test &amp; connect DocumentAnalysisAgent to XMLGenerator \u2705 - [x] Test &amp; implement complete PRD \u2192 Template flow \u2705 - [x] Test &amp; implement error handling in flows \u2705 - [x] Test &amp; implement template customization \u2705 - [x] Create comprehensive integration tests \u2705</p>"},{"location":"STATE_TRACKER/#phase-1-core-functionality-1-2-weeks","title":"Phase 1: Core Functionality (1-2 weeks)","text":"<p>Goal: Get basic PRD \u2192 Template conversion working end-to-end</p> <ol> <li>Week 1: Core Implementation \u2705</li> <li> Set up TDD infrastructure \u2705</li> <li> Complete DocumentAnalysisAgent with tests \u2705</li> <li> Complete XMLGenerator with tests \u2705</li> <li> Wire up agents with integration tests \u2705</li> <li> <p> Basic sequence planning implementation</p> </li> <li> <p>Week 2: Integration &amp; Testing</p> </li> <li> End-to-end workflow testing</li> <li> Error handling implementation</li> <li> CLI command testing</li> <li> Basic documentation</li> <li> Achieve 50% test coverage</li> </ol>"},{"location":"STATE_TRACKER/#phase-2-enhanced-features-2-3-weeks","title":"Phase 2: Enhanced Features (2-3 weeks)","text":"<p>Goal: Add advanced analysis and planning capabilities</p> <ol> <li>Week 3-4: Advanced Analysis</li> <li> PDF support with PyPDF2</li> <li> Word document support</li> <li> Codebase AST parsing</li> <li> Framework detection</li> <li> <p> Dependency graph visualization</p> </li> <li> <p>Week 5: Intelligent Planning</p> </li> <li> NetworkX integration</li> <li> Conflict resolution</li> <li> Manual adjustments</li> <li> Planning optimization</li> </ol>"},{"location":"STATE_TRACKER/#progress-metrics-updated","title":"\ud83d\udcc8 Progress Metrics (Updated)","text":"Component Current Target Progress Domain Models 100% 100% \u2705 Testing Infrastructure 100% 100% \u2705 \ud83c\udd95 PRD Analysis 25% 100% \u26a0\ufe0f Codebase Scanning 15% 100% \u26a0\ufe0f Template Generation 20% 100% \u26a0\ufe0f Sequence Planning 25% 100% \u26a0\ufe0f CLI Interface 80% 100% \u26a0\ufe0f API Server 70% 100% \u26a0\ufe0f MCP Server 5% 100% \u274c Test Coverage 9% 90% \u274c Documentation 40% 100% \u26a0\ufe0f"},{"location":"STATE_TRACKER/#todays-focus-tdd-approach","title":"\ud83c\udfaf Today's Focus (TDD Approach)","text":"<ol> <li> <p>Start with DocumentAnalysisAgent tests:    <pre><code># tests/unit/test_document_analysis_agent.py\n- test_analyze_markdown_extracts_title()\n- test_analyze_markdown_extracts_features()\n- test_analyze_markdown_parses_requirements()\n- test_analyze_markdown_handles_dependencies()\n</code></pre></p> </li> <li> <p>Then implement to make tests pass:</p> </li> <li>Focus on one test at a time</li> <li>Run ./check_code.sh after each GREEN</li> <li> <p>Commit after each passing test</p> </li> <li> <p>Move to XMLGenerator tests:    <pre><code># tests/unit/test_xml_generator.py\n- test_generate_basic_xml_structure()\n- test_populate_sequence_info()\n- test_populate_task_details()\n- test_validate_generated_xml()\n</code></pre></p> </li> </ol>"},{"location":"STATE_TRACKER/#technical-improvements-made","title":"\ud83d\udd27 Technical Improvements Made","text":"<ol> <li>Development Workflow: TDD is now mandatory with automated checks</li> <li>Code Quality: All tools configured and automated</li> <li>Testing: Infrastructure ready with fixtures and helpers</li> <li>Documentation: CLAUDE.md now has comprehensive TDD guidelines</li> </ol>"},{"location":"STATE_TRACKER/#notes","title":"\ud83d\udcdd Notes","text":"<ul> <li>TDD workflow is now fully established and documented</li> <li>Every implementation must start with a failing test</li> <li>Code quality checks are automated and mandatory</li> <li>Focus on making one test pass at a time</li> <li>Commit frequently (after each GREEN test)</li> </ul>"},{"location":"STATE_TRACKER/#risk-mitigation","title":"\ud83d\udea6 Risk Mitigation","text":"<ul> <li>Reduced Risk: TDD ensures code correctness from the start</li> <li>Quality Gates: Automated checks prevent regression</li> <li>Fast Feedback: Tests run in &lt;1 second for rapid iteration</li> <li>Clear Progress: Each passing test is measurable progress</li> </ul> <p>Updated: 2025-05-28 - TDD infrastructure complete, ready for implementation phase</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Customize Marvin's behavior to match your workflow and preferences.</p>"},{"location":"getting-started/configuration/#configuration-file-locations","title":"\ud83d\udcc1 Configuration File Locations","text":"<p>Marvin looks for configuration in these locations (in order):</p> <ol> <li><code>./marvin.toml</code> (project-specific)</li> <li><code>~/.config/marvin/config.toml</code> (user-wide)</li> <li>Environment variables (highest priority)</li> </ol>"},{"location":"getting-started/configuration/#basic-configuration","title":"\u2699\ufe0f Basic Configuration","text":"<p>Create a <code>marvin.toml</code> file in your project root:</p> marvin.toml<pre><code>[general]\n# Default output directory for generated tasks\noutput_dir = \"./tasks\"\n\n# Log level: DEBUG, INFO, WARNING, ERROR\nlog_level = \"INFO\"\n\n# Maximum number of tasks to generate per PRD\nmax_tasks = 20\n\n[templates]\n# Template format: xml, json, markdown\noutput_format = \"xml\"\n\n# Custom template directory\ntemplate_dir = \"./templates\"\n\n# Include implementation notes in output\ninclude_notes = true\n\n# Include testing strategy in output\ninclude_tests = true\n\n[analysis]\n# Enable codebase analysis\nanalyze_codebase = true\n\n# Supported file extensions for codebase scanning\nfile_extensions = [\".py\", \".js\", \".ts\", \".java\", \".cs\", \".go\"]\n\n# Directories to exclude from analysis\nexclude_dirs = [\"node_modules\", \".git\", \"__pycache__\", \"venv\"]\n\n[agents]\n# Enable specific analysis agents\nenable_document_analysis = true\nenable_dependency_resolution = true\nenable_template_generation = true\n\n# Custom agent configurations\n[agents.document_analysis]\nchunk_size = 2000\noverlap = 200\n\n[agents.dependency_resolution]\nmax_depth = 5\ninclude_external = false\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"\ud83c\udf0d Environment Variables","text":"<p>Override any configuration with environment variables:</p> <pre><code># General settings\nexport MARVIN_OUTPUT_DIR=\"./output\"\nexport MARVIN_LOG_LEVEL=\"DEBUG\"\nexport MARVIN_MAX_TASKS=\"15\"\n\n# Template settings  \nexport MARVIN_OUTPUT_FORMAT=\"json\"\nexport MARVIN_TEMPLATE_DIR=\"./custom-templates\"\n\n# Analysis settings\nexport MARVIN_ANALYZE_CODEBASE=\"false\"\nexport MARVIN_EXCLUDE_DIRS=\"node_modules,.git,dist\"\n\n# API settings (when using server mode)\nexport MARVIN_API_HOST=\"0.0.0.0\"\nexport MARVIN_API_PORT=\"8000\"\nexport MARVIN_API_CORS_ORIGINS=\"*\"\n\n# External service keys\nexport MARVIN_OPENAI_API_KEY=\"your-key-here\"\nexport MARVIN_ANTHROPIC_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"getting-started/configuration/#template-customization","title":"\ud83c\udfa8 Template Customization","text":""},{"location":"getting-started/configuration/#custom-output-formats","title":"Custom Output Formats","text":"<p>Create custom templates in your template directory:</p> XML TemplateJSON TemplateMarkdown Template templates/custom-task.xml.j2<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;coding_task&gt;\n  &lt;metadata&gt;\n    &lt;id&gt;{{ task.id }}&lt;/id&gt;\n    &lt;title&gt;{{ task.title }}&lt;/title&gt;\n    &lt;priority&gt;{{ task.priority }}&lt;/priority&gt;\n    &lt;company&gt;{{ project.company_name }}&lt;/company&gt;\n  &lt;/metadata&gt;\n\n  &lt;description&gt;{{ task.description }}&lt;/description&gt;\n\n  &lt;requirements&gt;\n    {% for req in task.requirements %}\n    &lt;requirement&gt;{{ req }}&lt;/requirement&gt;\n    {% endfor %}\n  &lt;/requirements&gt;\n\n  &lt;!-- Custom sections --&gt;\n  &lt;code_style&gt;{{ project.coding_standards }}&lt;/code_style&gt;\n  &lt;deployment_notes&gt;{{ task.deployment_notes }}&lt;/deployment_notes&gt;\n&lt;/coding_task&gt;\n</code></pre> templates/custom-task.json.j2<pre><code>{\n  \"task\": {\n    \"id\": \"{{ task.id }}\",\n    \"title\": \"{{ task.title }}\",\n    \"priority\": \"{{ task.priority }}\",\n    \"description\": \"{{ task.description }}\",\n    \"requirements\": [\n      {% for req in task.requirements %}\n      \"{{ req }}\"{% if not loop.last %},{% endif %}\n      {% endfor %}\n    ],\n    \"custom_fields\": {\n      \"company\": \"{{ project.company_name }}\",\n      \"coding_standards\": \"{{ project.coding_standards }}\",\n      \"deployment_target\": \"{{ project.deployment_target }}\"\n    }\n  }\n}\n</code></pre> templates/custom-task.md.j2<pre><code># {{ task.title }}\n\n**Priority:** {{ task.priority }}  \n**Estimated Effort:** {{ task.estimated_effort }}\n\n## Description\n{{ task.description }}\n\n## Requirements\n{% for req in task.requirements %}\n- {{ req }}\n{% endfor %}\n\n## Company Standards\n- **Coding Style:** {{ project.coding_standards }}\n- **Testing Framework:** {{ project.testing_framework }}\n- **Deployment Target:** {{ project.deployment_target }}\n\n## Acceptance Criteria\n{% for criterion in task.acceptance_criteria %}\n- [ ] {{ criterion }}\n{% endfor %}\n</code></pre>"},{"location":"getting-started/configuration/#template-variables","title":"Template Variables","text":"<p>Available variables in templates:</p> <pre><code># Task-specific variables\ntask.id                 # Unique task identifier\ntask.title             # Task title\ntask.description       # Detailed description\ntask.priority          # high, medium, low\ntask.estimated_effort  # Time estimate\ntask.requirements      # List of requirements\ntask.dependencies      # List of dependencies\ntask.acceptance_criteria # List of criteria\ntask.implementation_notes # Implementation hints\ntask.testing_strategy  # Testing approach\n\n# Project-specific variables\nproject.name           # Project name\nproject.company_name   # Your company name\nproject.coding_standards # Coding style guide\nproject.testing_framework # Test framework\nproject.deployment_target # Where code deploys\nproject.tech_stack     # Technologies used\n\n# Codebase analysis results\ncodebase.architecture  # Detected architecture pattern\ncodebase.languages     # Programming languages found\ncodebase.frameworks    # Frameworks detected\ncodebase.existing_models # Database models found\ncodebase.api_patterns  # API patterns used\n</code></pre>"},{"location":"getting-started/configuration/#integration-settings","title":"\ud83d\udd0c Integration Settings","text":""},{"location":"getting-started/configuration/#ai-tool-integration","title":"AI Tool Integration","text":"<p>Configure output for specific AI coding assistants:</p> marvin.toml<pre><code>[integrations]\n# Optimize output for specific AI tools\ntarget_ai_tool = \"cursor\"  # cursor, windsurf, claude-code, generic\n\n# Include tool-specific hints\ninclude_tool_hints = true\n\n# Tool-specific settings\n[integrations.cursor]\ninclude_file_structure = true\ninclude_import_suggestions = true\nmax_context_length = 8000\n\n[integrations.windsurf]\ninclude_workflow_steps = true\ninclude_git_suggestions = true\nmax_context_length = 12000\n\n[integrations.claude_code]\ninclude_error_handling = true\ninclude_testing_examples = true\nmax_context_length = 15000\n</code></pre>"},{"location":"getting-started/configuration/#ide-integration","title":"IDE Integration","text":"<p>For VS Code and other IDEs:</p> .vscode/settings.json<pre><code>{\n  \"marvin.outputDir\": \"./tasks\",\n  \"marvin.autoAnalyze\": true,\n  \"marvin.showPreview\": true,\n  \"files.associations\": {\n    \"*.marvin.xml\": \"xml\",\n    \"*.marvin.json\": \"json\"\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#team-configuration","title":"\ud83c\udfe2 Team Configuration","text":""},{"location":"getting-started/configuration/#shared-team-settings","title":"Shared Team Settings","text":"<p>Create a team configuration file:</p> team-config.toml<pre><code>[team]\nname = \"Engineering Team\"\ncompany = \"TechCorp Inc.\"\ncoding_standards_url = \"https://wiki.company.com/coding-standards\"\n\n[project_defaults]\n# Standard settings for all projects\noutput_format = \"xml\"\ninclude_tests = true\ninclude_notes = true\nmax_tasks = 25\n\n# Company-specific template variables\n[project_defaults.variables]\ncompany_name = \"TechCorp Inc.\"\ncoding_standards = \"Google Style Guide\"\ntesting_framework = \"Jest + PyTest\"\ndeployment_target = \"AWS ECS\"\ncode_review_process = \"GitHub PR + 2 approvals\"\n\n[quality_gates]\n# Enforce quality standards\nmin_acceptance_criteria = 3\nrequire_testing_strategy = true\nrequire_dependency_analysis = true\nmax_task_complexity = \"medium\"\n</code></pre>"},{"location":"getting-started/configuration/#cicd-integration","title":"CI/CD Integration","text":"<p>For automated PRD processing in pipelines:</p> .github/workflows/process-prds.yml<pre><code>name: Process PRDs\non:\n  push:\n    paths: ['docs/prds/*.md']\n\njobs:\n  generate-tasks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup Python &amp; Marvin\n        run: |\n          pip install uv\n          uv pip install marvin\n\n      - name: Process PRDs\n        run: |\n          marvin process docs/prds/ --output tasks/ --config team-config.toml\n\n      - name: Create PR with tasks\n        uses: peter-evans/create-pull-request@v5\n        with:\n          title: \"Auto-generated tasks from PRD updates\"\n          body: \"Generated by Marvin from updated PRDs\"\n          branch: \"auto/marvin-tasks\"\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"\ud83d\udd0d Advanced Configuration","text":""},{"location":"getting-started/configuration/#custom-agents","title":"Custom Agents","text":"<p>Add your own analysis agents:</p> marvin.toml<pre><code>[agents.custom]\n# Enable custom agents\nenable_security_analysis = true\nenable_performance_analysis = true\nenable_compliance_check = true\n\n[agents.custom.security_analysis]\nmodule = \"my_company.agents.security\"\nclass = \"SecurityAnalysisAgent\"\nconfig = { \"severity_threshold\" = \"medium\" }\n\n[agents.custom.performance_analysis]\nmodule = \"my_company.agents.performance\"\nclass = \"PerformanceAgent\"\nconfig = { \"target_response_time\" = \"200ms\" }\n</code></pre>"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":"<p>For persistent storage of analysis results:</p> marvin.toml<pre><code>[database]\n# Store analysis results for reuse\nenable_persistence = true\nconnection_string = \"sqlite:///./marvin_cache.db\"\n\n# Cache settings\ncache_prd_analysis = true\ncache_codebase_analysis = true\ncache_duration_days = 30\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"\ud83d\udea8 Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"Configuration not being loaded <p>Check:  - File location and naming (<code>marvin.toml</code>) - File permissions (readable) - TOML syntax validity</p> <p>Debug: <pre><code>marvin config show  # Display current configuration\nmarvin config validate  # Check configuration validity\n</code></pre></p> Environment variables not working <p>Check: - Variable naming (must start with <code>MARVIN_</code>) - Variable export in current shell - Variable precedence (env vars override file config)</p> <p>Debug: <pre><code>env | grep MARVIN  # Show Marvin environment variables\n</code></pre></p> Custom templates not found <p>Check: - Template directory path - File naming convention (<code>.j2</code> extension) - Template syntax (Jinja2 format)</p> <p>Debug: <pre><code>marvin templates list  # Show available templates\nmarvin templates validate  # Check template syntax\n</code></pre></p>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Validate your configuration:</p> <pre><code># Check current configuration\nmarvin config show\n\n# Validate configuration file\nmarvin config validate ./marvin.toml\n\n# Test template rendering\nmarvin templates test ./templates/custom-task.xml.j2\n\n# Dry run with configuration\nmarvin process example.md --dry-run --config ./marvin.toml\n</code></pre>"},{"location":"getting-started/configuration/#configuration-examples","title":"\ud83d\udcda Configuration Examples","text":""},{"location":"getting-started/configuration/#startup-team","title":"Startup Team","text":"startup-config.toml<pre><code>[general]\noutput_dir = \"./sprint-tasks\"\nlog_level = \"INFO\"\nmax_tasks = 15\n\n[templates]\noutput_format = \"markdown\"\ninclude_notes = false  # Keep it simple\n\n[project_defaults.variables]\ncompany_name = \"StartupCo\"\ncoding_standards = \"Prettier + ESLint\"\ntesting_framework = \"Vitest\"\ndeployment_target = \"Vercel\"\n</code></pre>"},{"location":"getting-started/configuration/#enterprise-team","title":"Enterprise Team","text":"enterprise-config.toml<pre><code>[general]\noutput_dir = \"./generated-tasks\"\nlog_level = \"WARNING\"\nmax_tasks = 50\n\n[templates]\noutput_format = \"xml\"\ninclude_notes = true\ninclude_tests = true\n\n[quality_gates]\nmin_acceptance_criteria = 5\nrequire_testing_strategy = true\nrequire_security_review = true\n\n[project_defaults.variables]\ncompany_name = \"Enterprise Corp\"\ncoding_standards = \"Company Standard v2.1\"\ntesting_framework = \"Jest + Cypress + JUnit\"\ndeployment_target = \"Kubernetes\"\ncompliance_requirements = \"SOX, GDPR, HIPAA\"\n</code></pre> <p>Next: Learn about processing different PRD formats \u2192</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Marvin and get started with converting PRDs to AI-ready coding tasks.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Marvin, ensure you have the following:</p> <ul> <li>Python 3.11 or higher - Download Python</li> <li>uv - Fast Python package manager - Install uv</li> <li>Git - Version control system - Download Git</li> </ul> <p>Why uv?</p> <p>We use uv for package management because it's:</p> <ul> <li>\u26a1 Lightning fast - 10-100x faster than pip</li> <li>\ud83d\udd12 Reliable - Better dependency resolution</li> <li>\ud83d\udce6 Feature-rich - Built-in virtual environment management</li> <li>\ud83d\udd27 Compatible - Works with standard requirements.txt and pyproject.toml</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"From Source (Recommended)From PyPI (Coming Soon)Using Docker (Coming Soon) <pre><code># This will be available once we publish to PyPI\nuv pip install marvin-prd\n</code></pre> <pre><code># Pull the Docker image\ndocker pull marvin/marvin:latest\n\n# Run Marvin in a container\ndocker run -v $(pwd):/workspace marvin/marvin process /workspace/my-prd.md\n</code></pre>"},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/moinsen-dev/marvin.git\ncd marvin\n</code></pre>"},{"location":"getting-started/installation/#2-set-up-virtual-environment","title":"2. Set Up Virtual Environment","text":"<pre><code># Create virtual environment\nuv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource .venv/bin/activate\n\n# On Windows:\n.venv\\Scripts\\activate\n</code></pre>"},{"location":"getting-started/installation/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code># Install Marvin in development mode\nuv pip install -e .\n\n# For development (includes testing and linting tools)\nuv pip install -e \".[dev]\"\n\n# For documentation building\nuv pip install -e \".[docs]\"\n</code></pre>"},{"location":"getting-started/installation/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Check Marvin version\nmarvin --version\n\n# Show available commands\nmarvin --help\n</code></pre>"},{"location":"getting-started/installation/#quick-verification","title":"Quick Verification","text":"<p>After installation, verify everything is working:</p> <pre><code># Process the example PRD\nmarvin process examples/prd/example_prd.md --output ./test-output/\n\n# Check the generated files\nls -la ./test-output/\n</code></pre> <p>You should see generated XML template files in the output directory.</p>"},{"location":"getting-started/installation/#environment-configuration","title":"Environment Configuration","text":"<p>Marvin can be configured using environment variables:</p> <pre><code># Set log level for debugging\nexport MARVIN_LOG_LEVEL=DEBUG\n\n# Configure API server settings\nexport MARVIN_API_HOST=0.0.0.0\nexport MARVIN_API_PORT=8000\n\n# Set environment\nexport MARVIN_ENVIRONMENT=development\n</code></pre> <p>Configuration File</p> <p>You can also create a <code>.env</code> file in your project root:</p> <pre><code>MARVIN_LOG_LEVEL=INFO\nMARVIN_ENVIRONMENT=development\nMARVIN_API_HOST=localhost\nMARVIN_API_PORT=8000\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>If you're using Homebrew, you can install Python and uv:</p> <pre><code># Install Python\nbrew install python@3.11\n\n# Install uv\nbrew install uv\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>On Windows, you might need to:</p> <ol> <li>Enable script execution: <code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></li> <li>Add Python to PATH during installation</li> <li>Use PowerShell or Windows Terminal for better experience</li> </ol>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Most Linux distributions come with Python. Install uv using:</p> <pre><code># Using pip\npip install --user uv\n\n# Or using pipx (recommended)\npipx install uv\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"Python version error <p>Error: <code>Python 3.11 or higher is required</code></p> <p>Solution:  <pre><code># Check your Python version\npython --version\n\n# If needed, install Python 3.11+\n# macOS: brew install python@3.11\n# Ubuntu: sudo apt install python3.11\n# Windows: Download from python.org\n</code></pre></p> uv not found <p>Error: <code>command not found: uv</code></p> <p>Solution: <pre><code># Install uv\npip install --user uv\n\n# Add to PATH if needed\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre></p> Import errors <p>Error: <code>ModuleNotFoundError: No module named 'marvin'</code></p> <p>Solution: <pre><code># Ensure you're in the virtual environment\nwhich python  # Should show .venv/bin/python\n\n# Reinstall in development mode\nuv pip install -e .\n</code></pre></p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the GitHub Issues</li> <li>Join our Discord Community</li> <li>Review the Developer Guide</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Marvin installed:</p> <ul> <li>\ud83d\udcda Follow the Quick Start Guide to process your first PRD</li> <li>\ud83d\udd27 Learn about Configuration Options</li> <li>\ud83d\ude80 Explore CLI Usage</li> <li>\ud83d\udd0c Set up the API Server</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start: Your First PRD-to-Tasks Transformation","text":"<p>Get Marvin working in under 5 minutes and see the magic of automated task generation!</p>"},{"location":"getting-started/quickstart/#what-youll-accomplish","title":"\ud83d\ude80 What You'll Accomplish","text":"<p>By the end of this guide, you'll have:</p> <ul> <li>\u2705 Installed Marvin on your system</li> <li>\u2705 Processed a real PRD into AI-ready tasks  </li> <li>\u2705 Seen the power of structured, dependency-aware task generation</li> <li>\u2705 Ready to use the output with your AI coding assistant</li> </ul> <p>Time Required: 5 minutes</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Make sure you have:</p> <ul> <li>Python 3.11+ - Download here</li> <li>uv package manager - Install guide</li> <li>Git - Download here</li> </ul>"},{"location":"getting-started/quickstart/#step-1-install-marvin","title":"\ud83d\udee0\ufe0f Step 1: Install Marvin","text":"macOS/LinuxWindows <pre><code># Clone the repository\ngit clone https://github.com/moinsen-dev/marvin.git\ncd marvin\n\n# Create virtual environment and install\nuv venv\nsource .venv/bin/activate\nuv pip install -e .\n\n# Verify installation\nmarvin --version\n</code></pre> <pre><code># Clone the repository\ngit clone https://github.com/moinsen-dev/marvin.git\ncd marvin\n\n# Create virtual environment and install\nuv venv\n.venv\\Scripts\\activate\nuv pip install -e .\n\n# Verify installation\nmarvin --version\n</code></pre> <p>\u2705 Installation Complete!</p> <p>You should see Marvin's version number. If not, check the Installation Troubleshooting.</p>"},{"location":"getting-started/quickstart/#step-2-create-your-first-prd","title":"\ud83d\udcc4 Step 2: Create Your First PRD","text":"<p>Let's start with a real-world example. Create a file called <code>social-feed.md</code>:</p> social-feed.md<pre><code># Social Media Feed Feature\n\n## Product Overview\nWe need to build a social media feed that allows users to post updates, \nlike content, and comment on posts in real-time.\n\n## Core Requirements\n\n### User Posts\n- Users can create text posts (max 280 characters)\n- Posts support image attachments (PNG, JPG)\n- Posts have timestamps and author information\n- Users can edit their own posts within 5 minutes\n\n### Engagement Features  \n- Like/unlike posts with real-time counter updates\n- Comment on posts with threaded replies\n- Share posts with other users\n- Real-time notifications for interactions\n\n### Feed Display\n- Chronological feed of posts from followed users\n- Infinite scroll pagination\n- Real-time updates when new posts are available\n- Filter options (all posts, friends only, trending)\n\n## Technical Requirements\n- RESTful API backend\n- Real-time updates via WebSocket\n- Mobile-responsive design\n- Database optimization for fast feed generation\n- Content moderation hooks\n\n## Acceptance Criteria\n- [ ] Users can create and edit posts\n- [ ] Real-time like counters work correctly\n- [ ] Comments display in threaded format\n- [ ] Feed loads quickly (&lt; 2 seconds)\n- [ ] Mobile layout works on all screen sizes\n- [ ] Notifications appear instantly\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-transform-with-marvin","title":"\u26a1 Step 3: Transform with Marvin","text":"<p>Now let's see Marvin in action:</p> <pre><code># Process the PRD\nmarvin process social-feed.md --output ./tasks/\n\n# Check what was generated\nls -la ./tasks/\n</code></pre> <p>Expected Output: <pre><code>./tasks/\n\u251c\u2500\u2500 task_001_user_posts_data_model.xml\n\u251c\u2500\u2500 task_002_user_posts_api_endpoints.xml  \n\u251c\u2500\u2500 task_003_post_creation_ui.xml\n\u251c\u2500\u2500 task_004_engagement_system.xml\n\u251c\u2500\u2500 task_005_real_time_updates.xml\n\u251c\u2500\u2500 task_006_feed_display_logic.xml\n\u251c\u2500\u2500 task_007_mobile_responsive_design.xml\n\u2514\u2500\u2500 task_summary.json\n</code></pre></p>"},{"location":"getting-started/quickstart/#step-4-examine-the-generated-tasks","title":"\ud83d\udd0d Step 4: Examine the Generated Tasks","text":"<p>Let's look at one of the generated tasks:</p> **\ud83d\udccb Click to see: task_001_user_posts_data_model.xml** <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;coding_task&gt;\n  &lt;metadata&gt;\n    &lt;task_id&gt;task_001&lt;/task_id&gt;\n    &lt;title&gt;User Posts Data Model Implementation&lt;/title&gt;\n    &lt;priority&gt;high&lt;/priority&gt;\n    &lt;estimated_effort&gt;3-4 hours&lt;/estimated_effort&gt;\n    &lt;created_from&gt;social-feed.md&lt;/created_from&gt;\n  &lt;/metadata&gt;\n\n  &lt;context&gt;\n    &lt;description&gt;\n      Implement the core data model for user posts in the social media feed.\n      This includes the database schema, model classes, and basic validation\n      for post creation and management.\n    &lt;/description&gt;\n\n    &lt;business_value&gt;\n      Foundation for all post-related functionality. Must handle text content,\n      image attachments, timestamps, and author relationships efficiently.\n    &lt;/business_value&gt;\n  &lt;/context&gt;\n\n  &lt;requirements&gt;\n    &lt;functional&gt;\n      &lt;requirement&gt;Post model with text content (280 char limit)&lt;/requirement&gt;\n      &lt;requirement&gt;Image attachment support (PNG, JPG formats)&lt;/requirement&gt;\n      &lt;requirement&gt;Author relationship to User model&lt;/requirement&gt;\n      &lt;requirement&gt;Created/updated timestamp tracking&lt;/requirement&gt;\n      &lt;requirement&gt;Edit window validation (5 minute limit)&lt;/requirement&gt;\n    &lt;/functional&gt;\n\n    &lt;technical&gt;\n      &lt;requirement&gt;Database migration scripts&lt;/requirement&gt;\n      &lt;requirement&gt;Model validation and constraints&lt;/requirement&gt;\n      &lt;requirement&gt;Efficient indexing for feed queries&lt;/requirement&gt;\n      &lt;requirement&gt;Image upload and storage handling&lt;/requirement&gt;\n    &lt;/technical&gt;\n  &lt;/requirements&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency type=\"model\"&gt;User authentication system&lt;/dependency&gt;\n    &lt;dependency type=\"infrastructure\"&gt;Database setup&lt;/dependency&gt;\n    &lt;dependency type=\"service\"&gt;File storage service&lt;/dependency&gt;\n  &lt;/dependencies&gt;\n\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Posts can be created with text content up to 280 characters&lt;/criterion&gt;\n    &lt;criterion&gt;Image attachments are properly validated and stored&lt;/criterion&gt;\n    &lt;criterion&gt;Author information is correctly associated&lt;/criterion&gt;\n    &lt;criterion&gt;Edit window enforcement works (5 minutes)&lt;/criterion&gt;\n    &lt;criterion&gt;Database queries are optimized for feed performance&lt;/criterion&gt;\n    &lt;criterion&gt;All model validations prevent invalid data&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n\n  &lt;implementation_notes&gt;\n    &lt;note&gt;Consider using a composite index on (author_id, created_at) for feed queries&lt;/note&gt;\n    &lt;note&gt;Implement soft delete for posts to maintain data integrity&lt;/note&gt;\n    &lt;note&gt;Use database-level constraints for character limits&lt;/note&gt;\n    &lt;note&gt;Consider image processing pipeline for different sizes&lt;/note&gt;\n  &lt;/implementation_notes&gt;\n\n  &lt;testing_strategy&gt;\n    &lt;test_case&gt;Valid post creation with text only&lt;/test_case&gt;\n    &lt;test_case&gt;Valid post creation with image attachment&lt;/test_case&gt;\n    &lt;test_case&gt;Character limit enforcement (280 chars)&lt;/test_case&gt;\n    &lt;test_case&gt;Edit window validation after 5 minutes&lt;/test_case&gt;\n    &lt;test_case&gt;Invalid image format rejection&lt;/test_case&gt;\n    &lt;test_case&gt;Database constraint violations&lt;/test_case&gt;\n  &lt;/testing_strategy&gt;\n&lt;/coding_task&gt;\n</code></pre> <p>\ud83e\udd2f Look at that detail! Marvin automatically:</p> <ul> <li>\u2705 Broke down requirements into specific, actionable tasks</li> <li>\u2705 Identified dependencies between different components</li> <li>\u2705 Provided technical context for better AI understanding</li> <li>\u2705 Included testing strategy for comprehensive coverage</li> <li>\u2705 Added implementation notes with best practices</li> </ul>"},{"location":"getting-started/quickstart/#step-5-use-with-your-ai-coding-assistant","title":"\ud83e\udd16 Step 5: Use with Your AI Coding Assistant","text":"<p>Now you're ready to supercharge your development with AI tools!</p> CursorWindsurfClaude Code <pre><code># Copy the task content\ncat tasks/task_001_user_posts_data_model.xml\n\n# Paste into Cursor with this prompt:\n# \"Implement this task following the specifications exactly\"\n</code></pre> <pre><code># Open the task file in Windsurf\nwindsurf tasks/task_001_user_posts_data_model.xml\n\n# Use the task content as your AI prompt\n</code></pre> <pre><code># Share the task with Claude Code:\n# \"Please implement the following coding task: [paste XML content]\"\n</code></pre>"},{"location":"getting-started/quickstart/#pro-tips-for-ai-integration","title":"\ud83c\udfaf Pro Tips for AI Integration","text":"<p>Get Better AI Results</p> <p>Perfect Prompt Formula: <pre><code>Please implement this coding task following the XML specification exactly:\n\n[Paste the entire XML task here]\n\nAdditional context:\n- Use [your preferred framework/language]\n- Follow [your coding standards]\n- Include comprehensive tests\n</code></pre></p> <p>Why This Works So Well</p> <ul> <li>Structured Context: AI gets all the information it needs</li> <li>Clear Requirements: No ambiguity about what to build</li> <li>Dependency Awareness: AI understands what needs to exist first</li> <li>Testing Strategy: AI can write tests alongside code</li> <li>Implementation Notes: AI follows best practices automatically</li> </ul>"},{"location":"getting-started/quickstart/#step-6-see-the-results","title":"\ud83d\udcc8 Step 6: See the Results","text":"<p>Here's what you can expect when using Marvin-generated tasks with AI:</p>"},{"location":"getting-started/quickstart/#before-marvin-typical-ai-prompt","title":"\u274c Before Marvin (Typical AI Prompt)","text":"<pre><code>\"Build a social media feed with posts, likes, and comments\"\n</code></pre> <p>AI Output: Generic code, missing edge cases, no tests, unclear structure</p>"},{"location":"getting-started/quickstart/#after-marvin-structured-task","title":"\u2705 After Marvin (Structured Task)","text":"<pre><code>&lt;coding_task&gt;\n  &lt;title&gt;User Posts Data Model Implementation&lt;/title&gt;\n  &lt;requirements&gt;\n    &lt;requirement&gt;Post model with text content (280 char limit)&lt;/requirement&gt;\n    &lt;!-- ... detailed specifications ... --&gt;\n  &lt;/requirements&gt;\n&lt;/coding_task&gt;\n</code></pre> <p>AI Output: Production-ready code, comprehensive tests, proper validation, optimized queries!</p>"},{"location":"getting-started/quickstart/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Congratulations! You've successfully used Marvin to transform a PRD into AI-ready tasks. Here's what to explore next:</p>"},{"location":"getting-started/quickstart/#dive-deeper","title":"\ud83d\udcda Dive Deeper","text":"<ul> <li>Processing Different PRD Formats</li> <li>Understanding Template Structure</li> <li>Advanced CLI Usage</li> </ul>"},{"location":"getting-started/quickstart/#advanced-features","title":"\ud83d\udee0\ufe0f Advanced Features","text":"<ul> <li>Codebase Analysis Integration</li> <li>Custom Template Configuration</li> <li>API Server for Team Workflows</li> </ul>"},{"location":"getting-started/quickstart/#real-world-examples","title":"\ud83c\udfaf Real-World Examples","text":"<ul> <li>E-commerce Platform PRD</li> <li>Dashboard Analytics System</li> <li>User Authentication Flow</li> </ul>"},{"location":"getting-started/quickstart/#pro-tips-for-maximum-impact","title":"\ud83d\udca1 Pro Tips for Maximum Impact","text":""},{"location":"getting-started/quickstart/#writing-better-prds-for-marvin","title":"\ud83c\udfaf Writing Better PRDs for Marvin","text":"<p>Structure Your PRDs</p> <p>Include These Sections: - Clear feature overview - Detailed requirements with specifics - Technical constraints - Acceptance criteria - User stories or scenarios</p>"},{"location":"getting-started/quickstart/#optimizing-ai-results","title":"\u26a1 Optimizing AI Results","text":"<p>Best Practices</p> <ol> <li>Use the full XML task - don't just copy the title</li> <li>Add your project context - mention your tech stack</li> <li>Reference existing code - help AI understand your patterns</li> <li>Iterate on outputs - refine tasks based on results</li> </ol>"},{"location":"getting-started/quickstart/#iterative-development","title":"\ud83d\udd04 Iterative Development","text":"<p>Continuous Improvement</p> <ul> <li>Start with one task at a time</li> <li>Build dependencies first (follow task order)</li> <li>Test each component before moving on</li> <li>Use task acceptance criteria for validation</li> </ul>"},{"location":"getting-started/quickstart/#join-the-community","title":"\ud83e\udd1d Join the Community","text":"<p>You're now part of the Marvin ecosystem! Connect with other users:</p> <ul> <li>\ud83d\udcac Discord Community - Get help and share examples</li> <li>\ud83d\udc19 GitHub Repository - Report issues and contribute</li> <li>\ud83d\udc26 Twitter Updates - Latest tips and features</li> </ul>"},{"location":"getting-started/quickstart/#having-issues","title":"\u2753 Having Issues?","text":"<p>Ready to transform your development workflow? Explore more features \u2192</p>"},{"location":"getting-started/quickstart/#common-problems","title":"Common Problems","text":"Tasks seem too generic <p>Solution: Add more detail to your PRD. Include specific technical requirements, constraints, and examples.</p> Dependencies are unclear <p>Solution: Use <code>marvin process --codebase ./src</code> to analyze your existing code structure.</p> AI doesn't understand the context <p>Solution: Include the full XML task AND add project-specific context in your prompt.</p>"},{"location":"getting-started/quickstart/#get-help","title":"Get Help","text":"<ul> <li>\ud83d\udcd6 Troubleshooting Guide</li> <li>\ud83d\udcac Discord Support</li> <li>\ud83d\udc19 GitHub Issues</li> </ul>"},{"location":"user-guide/cli-usage/","title":"CLI Usage Guide","text":"<p>Master Marvin's command-line interface for efficient PRD processing and task generation.</p>"},{"location":"user-guide/cli-usage/#quick-reference","title":"\ud83d\ude80 Quick Reference","text":"<pre><code># Basic usage\nmarvin process &lt;prd-file&gt; [options]\n\n# Common patterns\nmarvin process feature.md --output ./tasks/\nmarvin process *.md --codebase ./src/ --output ./tasks/\nmarvin process prds/ --recursive --format json\n</code></pre>"},{"location":"user-guide/cli-usage/#core-commands","title":"\ud83d\udccb Core Commands","text":""},{"location":"user-guide/cli-usage/#marvin-process-convert-prds-to-tasks","title":"<code>marvin process</code> - Convert PRDs to Tasks","text":"<p>The main command for processing Product Requirement Documents:</p> <pre><code>marvin process [PRD_FILES] [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-usage/#basic-examples","title":"Basic Examples","text":"Single FileMultiple FilesDirectory Processing <pre><code># Process one PRD file\nmarvin process user-auth.md\n\n# With custom output directory\nmarvin process user-auth.md --output ./auth-tasks/\n</code></pre> <pre><code># Process multiple files\nmarvin process auth.md dashboard.md settings.md\n\n# Using wildcards\nmarvin process *.md\nmarvin process prds/feature-*.md\n</code></pre> <pre><code># Process all files in directory\nmarvin process ./prds/\n\n# Recursive processing\nmarvin process ./docs/ --recursive\n\n# With file filtering\nmarvin process ./docs/ --include \"*.md\" --include \"*.txt\"\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-options","title":"Advanced Options","text":"<pre><code>marvin process feature.md \\\n  --output ./tasks/ \\\n  --codebase ./src/ \\\n  --format xml \\\n  --config ./team-config.toml \\\n  --max-tasks 15 \\\n  --verbose\n</code></pre>"},{"location":"user-guide/cli-usage/#options-reference","title":"Options Reference","text":"Option Short Description Example <code>--output</code> <code>-o</code> Output directory for generated tasks <code>--output ./tasks/</code> <code>--codebase</code> <code>-c</code> Path to existing codebase for analysis <code>--codebase ./src/</code> <code>--format</code> <code>-f</code> Output format (xml, json, markdown, yaml) <code>--format json</code> <code>--config</code> Custom configuration file <code>--config ./marvin.toml</code> <code>--max-tasks</code> Maximum number of tasks to generate <code>--max-tasks 20</code> <code>--recursive</code> <code>-r</code> Process directories recursively <code>--recursive</code> <code>--include</code> Include files matching pattern <code>--include \"*.md\"</code> <code>--exclude</code> Exclude files matching pattern <code>--exclude \"*draft*\"</code> <code>--dry-run</code> Preview output without creating files <code>--dry-run</code> <code>--verbose</code> <code>-v</code> Enable detailed output <code>--verbose</code> <code>--quiet</code> <code>-q</code> Suppress non-error output <code>--quiet</code>"},{"location":"user-guide/cli-usage/#configuration-commands","title":"\ud83d\udd27 Configuration Commands","text":""},{"location":"user-guide/cli-usage/#marvin-config-manage-configuration","title":"<code>marvin config</code> - Manage Configuration","text":"<pre><code># Show current configuration\nmarvin config show\n\n# Show configuration from specific file\nmarvin config show --file ./team-config.toml\n\n# Validate configuration\nmarvin config validate\n\n# Initialize new configuration\nmarvin config init --interactive\n</code></pre>"},{"location":"user-guide/cli-usage/#configuration-examples","title":"Configuration Examples","text":"View ConfigurationInteractive Setup <pre><code>$ marvin config show\n\n\ud83d\udccb Current Configuration:\n\n[general]\noutput_dir = \"./tasks\"\nlog_level = \"INFO\"\nmax_tasks = 20\n\n[templates]\noutput_format = \"xml\"\ninclude_notes = true\ninclude_tests = true\n\n[analysis]\nanalyze_codebase = true\nfile_extensions = [\".py\", \".js\", \".ts\"]\n</code></pre> <pre><code>$ marvin config init --interactive\n\n\ud83d\udd27 Marvin Configuration Setup\n\nProject name: My Awesome Project\nCompany name: TechCorp Inc.\nDefault output directory [./tasks]: ./generated-tasks\nOutput format [xml]: json\nInclude implementation notes? [Y/n]: Y\nEnable codebase analysis? [Y/n]: Y\n\n\u2705 Configuration saved to ./marvin.toml\n</code></pre>"},{"location":"user-guide/cli-usage/#analysis-commands","title":"\ud83d\udd0d Analysis Commands","text":""},{"location":"user-guide/cli-usage/#marvin-analyze-detailed-analysis","title":"<code>marvin analyze</code> - Detailed Analysis","text":"<p>Get insights without generating tasks:</p> <pre><code># Analyze PRD structure\nmarvin analyze feature.md --type prd\n\n# Analyze codebase\nmarvin analyze ./src/ --type codebase\n\n# Combined analysis\nmarvin analyze feature.md --codebase ./src/ --type combined\n</code></pre>"},{"location":"user-guide/cli-usage/#analysis-types","title":"Analysis Types","text":"PRD AnalysisCodebase Analysis <pre><code>$ marvin analyze social-feed.md --type prd\n\n\ud83d\udcc4 PRD Analysis: social-feed.md\n\n\ud83d\udcca Structure Analysis:\n   \u251c\u2500\u2500 Sections found: 6\n   \u251c\u2500\u2500 Requirements: 12 functional, 5 technical\n   \u251c\u2500\u2500 User stories: 8\n   \u251c\u2500\u2500 Acceptance criteria: 15\n   \u2514\u2500\u2500 Technical constraints: 7\n\n\ud83c\udfaf Feature Breakdown:\n   \u251c\u2500\u2500 User Posts (complexity: medium)\n   \u251c\u2500\u2500 Engagement System (complexity: high)\n   \u251c\u2500\u2500 Real-time Updates (complexity: high)\n   \u2514\u2500\u2500 Feed Display (complexity: medium)\n\n\u26a1 Estimated Effort: 18-24 hours\n\ud83d\udcc8 Recommended Tasks: 6-8\n</code></pre> <pre><code>$ marvin analyze ./src/ --type codebase\n\n\ud83c\udfd7\ufe0f  Codebase Analysis: ./src/\n\n\ud83d\udcc1 Project Structure:\n   \u251c\u2500\u2500 Architecture: Django REST API\n   \u251c\u2500\u2500 Language: Python 3.11\n   \u251c\u2500\u2500 Framework: Django 4.2, DRF 3.14\n   \u251c\u2500\u2500 Database: PostgreSQL (detected)\n   \u2514\u2500\u2500 Testing: PyTest, Factory Boy\n\n\ud83d\udce6 Components Found:\n   \u251c\u2500\u2500 Models: 12 (User, Post, Comment, etc.)\n   \u251c\u2500\u2500 Views: 8 API viewsets\n   \u251c\u2500\u2500 Serializers: 15\n   \u251c\u2500\u2500 Tests: 45 test files\n   \u2514\u2500\u2500 Migrations: 23\n\n\ud83d\udd17 API Patterns:\n   \u251c\u2500\u2500 REST endpoints follow /api/v1/ pattern\n   \u251c\u2500\u2500 Token authentication in use\n   \u251c\u2500\u2500 Pagination with PageNumberPagination\n   \u2514\u2500\u2500 Custom permission classes\n</code></pre>"},{"location":"user-guide/cli-usage/#marvin-dependencies-dependency-analysis","title":"<code>marvin dependencies</code> - Dependency Analysis","text":"<p>Understand task relationships:</p> <pre><code># Show task dependencies\nmarvin dependencies ./tasks/\n\n# Visualize dependency graph\nmarvin dependencies ./tasks/ --graph --output deps.svg\n\n# Check for circular dependencies\nmarvin dependencies ./tasks/ --check-circular\n</code></pre> <pre><code>$ marvin dependencies ./tasks/\n\n\ud83d\udd17 Task Dependencies Analysis\n\n\ud83d\udccb Dependency Graph:\n   task_001_data_model\n   \u251c\u2500\u2500 No dependencies\n   \u2514\u2500\u2500 Required by: task_002, task_003\n\n   task_002_api_endpoints  \n   \u251c\u2500\u2500 Depends on: task_001_data_model\n   \u2514\u2500\u2500 Required by: task_004, task_005\n\n   task_003_user_interface\n   \u251c\u2500\u2500 Depends on: task_001_data_model\n   \u2514\u2500\u2500 Required by: task_005\n\n   task_004_real_time_updates\n   \u251c\u2500\u2500 Depends on: task_002_api_endpoints\n   \u2514\u2500\u2500 Required by: None\n\n   task_005_integration\n   \u251c\u2500\u2500 Depends on: task_002_api_endpoints, task_003_user_interface\n   \u2514\u2500\u2500 Required by: None\n\n\u26a1 Recommended Order:\n   1. task_001_data_model\n   2. task_002_api_endpoints, task_003_user_interface (parallel)\n   3. task_004_real_time_updates\n   4. task_005_integration\n\n\u2705 No circular dependencies found\n</code></pre>"},{"location":"user-guide/cli-usage/#template-commands","title":"\ud83c\udfa8 Template Commands","text":""},{"location":"user-guide/cli-usage/#marvin-templates-template-management","title":"<code>marvin templates</code> - Template Management","text":"<pre><code># List available templates\nmarvin templates list\n\n# Show template details\nmarvin templates show auth-system\n\n# Validate custom template\nmarvin templates validate ./my-template.xml.j2\n\n# Test template rendering\nmarvin templates test ./my-template.xml.j2 --data ./test-data.json\n</code></pre>"},{"location":"user-guide/cli-usage/#template-operations","title":"Template Operations","text":"List TemplatesTemplate Testing <pre><code>$ marvin templates list\n\n\ud83d\udccb Available Templates:\n\nBuilt-in Templates:\n\u251c\u2500\u2500 \ud83d\udd10 auth-system-basic (User authentication)\n\u251c\u2500\u2500 \ud83d\udd10 auth-system-advanced (OAuth, 2FA, etc.)\n\u251c\u2500\u2500 \ud83d\udcca crud-api (REST API with CRUD operations)\n\u251c\u2500\u2500 \ud83c\udfa8 react-component (React component with tests)\n\u251c\u2500\u2500 \u26a1 websocket-feature (Real-time functionality)\n\u2514\u2500\u2500 \ud83e\uddea testing-suite (Comprehensive test setup)\n\nCustom Templates (./templates/):\n\u251c\u2500\u2500 \ud83c\udfe2 company-task-template\n\u2514\u2500\u2500 \ud83d\ude80 startup-task-template\n</code></pre> <pre><code>$ marvin templates test ./custom-template.xml.j2 --data test-data.json\n\n\ud83e\uddea Template Test: custom-template.xml.j2\n\n\u2705 Syntax valid\n\u2705 All variables resolved\n\u2705 Output structure correct\n\n\ud83d\udcc4 Rendered Output:\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;coding_task&gt;\n  &lt;title&gt;User Authentication System&lt;/title&gt;\n  &lt;!-- ... rendered content ... --&gt;\n&lt;/coding_task&gt;\n</code></pre>"},{"location":"user-guide/cli-usage/#utility-commands","title":"\ud83d\udd27 Utility Commands","text":""},{"location":"user-guide/cli-usage/#marvin-validate-validation-tools","title":"<code>marvin validate</code> - Validation Tools","text":"<pre><code># Validate PRD structure\nmarvin validate prd feature.md\n\n# Validate generated tasks\nmarvin validate tasks ./tasks/\n\n# Validate configuration\nmarvin validate config ./marvin.toml\n</code></pre>"},{"location":"user-guide/cli-usage/#marvin-stats-project-statistics","title":"<code>marvin stats</code> - Project Statistics","text":"<pre><code># Show project statistics\nmarvin stats ./tasks/\n\n# Detailed breakdown\nmarvin stats ./tasks/ --detailed\n\n# Export statistics\nmarvin stats ./tasks/ --export stats.json\n</code></pre> <pre><code>$ marvin stats ./tasks/ --detailed\n\n\ud83d\udcca Project Statistics\n\n\ud83d\udccb Task Overview:\n   \u251c\u2500\u2500 Total tasks: 8\n   \u251c\u2500\u2500 High priority: 3\n   \u251c\u2500\u2500 Medium priority: 4\n   \u251c\u2500\u2500 Low priority: 1\n   \u2514\u2500\u2500 Total estimated effort: 24-32 hours\n\n\ud83c\udff7\ufe0f  Task Categories:\n   \u251c\u2500\u2500 Backend API: 4 tasks (12-16 hours)\n   \u251c\u2500\u2500 Frontend UI: 3 tasks (8-12 hours)\n   \u2514\u2500\u2500 Testing: 1 task (4 hours)\n\n\ud83d\udd17 Dependencies:\n   \u251c\u2500\u2500 Independent tasks: 2\n   \u251c\u2500\u2500 Tasks with dependencies: 6\n   \u251c\u2500\u2500 Maximum dependency depth: 3\n   \u2514\u2500\u2500 Parallel execution opportunities: 4\n\n\ud83d\udcc8 Complexity Distribution:\n   \u251c\u2500\u2500 Simple: 2 tasks\n   \u251c\u2500\u2500 Medium: 4 tasks\n   \u2514\u2500\u2500 Complex: 2 tasks\n</code></pre>"},{"location":"user-guide/cli-usage/#marvin-export-export-tools","title":"<code>marvin export</code> - Export Tools","text":"<pre><code># Export to different formats\nmarvin export ./tasks/ --format json --output tasks.json\nmarvin export ./tasks/ --format csv --output tasks.csv\n\n# Export for project management tools\nmarvin export ./tasks/ --format jira --output jira-import.json\nmarvin export ./tasks/ --format trello --output trello-import.json\n</code></pre>"},{"location":"user-guide/cli-usage/#workflow-examples","title":"\ud83d\ude80 Workflow Examples","text":""},{"location":"user-guide/cli-usage/#daily-development-workflow","title":"Daily Development Workflow","text":"<pre><code># 1. Morning: Process new requirements\nmarvin process new-feature.md --codebase ./src/ --output ./today-tasks/\n\n# 2. Review generated tasks\nmarvin stats ./today-tasks/ --detailed\n\n# 3. Check dependencies\nmarvin dependencies ./today-tasks/ --graph\n\n# 4. Start development with first task\ncat ./today-tasks/task_001_*.xml\n# Copy content to AI coding assistant\n\n# 5. Validate completed work\nmarvin validate tasks ./today-tasks/\n</code></pre>"},{"location":"user-guide/cli-usage/#team-collaboration-workflow","title":"Team Collaboration Workflow","text":"<pre><code># 1. Process PRDs with team config\nmarvin process ./prds/ --config ./team-config.toml --output ./sprint-tasks/\n\n# 2. Generate team statistics\nmarvin stats ./sprint-tasks/ --export team-stats.json\n\n# 3. Export for project management\nmarvin export ./sprint-tasks/ --format jira --output sprint-import.json\n\n# 4. Validate all tasks meet standards\nmarvin validate tasks ./sprint-tasks/ --strict\n</code></pre>"},{"location":"user-guide/cli-usage/#cicd-integration-workflow","title":"CI/CD Integration Workflow","text":"<pre><code>#!/bin/bash\n# .github/workflows/process-prds.sh\n\n# Process any new or updated PRDs\nchanged_prds=$(git diff --name-only HEAD~1 HEAD | grep \"\\.md$\")\n\nif [ ! -z \"$changed_prds\" ]; then\n  echo \"Processing changed PRDs: $changed_prds\"\n\n  # Process with team configuration\n  marvin process $changed_prds \\\n    --config ./team-config.toml \\\n    --codebase ./src/ \\\n    --output ./generated-tasks/ \\\n    --format json\n\n  # Validate output\n  marvin validate tasks ./generated-tasks/\n\n  # Generate statistics\n  marvin stats ./generated-tasks/ --export task-stats.json\n\n  # Create PR with generated tasks\n  git add ./generated-tasks/\n  git commit -m \"Auto-generated tasks from PRD updates\"\nfi\n</code></pre>"},{"location":"user-guide/cli-usage/#debugging-and-troubleshooting","title":"\ud83d\udd0d Debugging and Troubleshooting","text":""},{"location":"user-guide/cli-usage/#verbose-mode","title":"Verbose Mode","text":"<pre><code># Enable detailed logging\nmarvin process feature.md --verbose\n\n# Debug-level logging\nmarvin process feature.md --log-level DEBUG\n\n# Save logs to file\nmarvin process feature.md --verbose --log-file marvin.log\n</code></pre>"},{"location":"user-guide/cli-usage/#dry-run-mode","title":"Dry Run Mode","text":"<pre><code># Preview what would be generated\nmarvin process feature.md --dry-run\n\n# Show analysis without creating files\nmarvin process feature.md --dry-run --verbose\n</code></pre>"},{"location":"user-guide/cli-usage/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Command not found: marvin <p>Problem: Marvin not in PATH or not installed properly</p> <p>Solution: <pre><code># Check installation\nwhich marvin\npip list | grep marvin\n\n# Reinstall if needed\nuv pip install -e .\n\n# Check virtual environment\nwhich python\n</code></pre></p> No tasks generated <p>Problem: PRD format not recognized or empty requirements</p> <p>Solution: <pre><code># Use verbose mode to see parsing details\nmarvin process feature.md --verbose\n\n# Validate PRD structure\nmarvin validate prd feature.md\n\n# Check file encoding\nfile feature.md\n</code></pre></p> Tasks are too generic <p>Problem: PRD lacks detail or codebase analysis disabled</p> <p>Solution: <pre><code># Include codebase analysis\nmarvin process feature.md --codebase ./src/\n\n# Use custom configuration\nmarvin process feature.md --config ./detailed-config.toml\n\n# Analyze PRD quality first\nmarvin analyze feature.md --type prd\n</code></pre></p>"},{"location":"user-guide/cli-usage/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Fast processing for large projects\nmarvin process ./prds/ \\\n  --exclude \"*draft*\" \\\n  --exclude \"*template*\" \\\n  --max-tasks 10 \\\n  --parallel\n\n# Cache codebase analysis\nmarvin process feature.md \\\n  --codebase ./src/ \\\n  --cache-analysis \\\n  --cache-duration 24h\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-usage","title":"\ud83d\udcda Advanced Usage","text":""},{"location":"user-guide/cli-usage/#environment-variables","title":"Environment Variables","text":"<pre><code># Set defaults via environment\nexport MARVIN_OUTPUT_DIR=\"./tasks\"\nexport MARVIN_LOG_LEVEL=\"INFO\"\nexport MARVIN_MAX_TASKS=\"15\"\n\n# Then run without flags\nmarvin process feature.md\n</code></pre>"},{"location":"user-guide/cli-usage/#shell-completion","title":"Shell Completion","text":"<pre><code># Enable shell completion\nmarvin --install-completion\n\n# For bash\nmarvin --install-completion bash\n\n# For zsh\nmarvin --install-completion zsh\n</code></pre>"},{"location":"user-guide/cli-usage/#aliases-and-shortcuts","title":"Aliases and Shortcuts","text":"<pre><code># Add to your shell profile\nalias mp=\"marvin process\"\nalias ma=\"marvin analyze\"\nalias ms=\"marvin stats\"\n\n# Usage\nmp feature.md -o ./tasks/ -c ./src/\nma feature.md --type prd\nms ./tasks/ --detailed\n</code></pre> <p>Next: API Usage Guide \u2192</p>"},{"location":"user-guide/processing-prds/","title":"Processing PRDs","text":"<p>Learn how to convert your Product Requirement Documents into AI-ready coding tasks with Marvin.</p>"},{"location":"user-guide/processing-prds/#supported-prd-formats","title":"\ud83d\udccb Supported PRD Formats","text":"<p>Marvin can process PRDs in various formats:</p>"},{"location":"user-guide/processing-prds/#markdown-md","title":"\u2705 Markdown (.md)","text":"<p>Most common format, excellent structure support:</p> feature-request.md<pre><code># Feature Name\n\n## Overview\nBrief description of the feature\n\n## Requirements\n- Functional requirement 1\n- Functional requirement 2\n\n## Technical Constraints\n- Performance requirements\n- Security considerations\n\n## Acceptance Criteria\n- [ ] Criterion 1\n- [ ] Criterion 2\n</code></pre>"},{"location":"user-guide/processing-prds/#plain-text-txt","title":"\u2705 Plain Text (.txt)","text":"<p>Simple format, good for quick notes:</p> feature-request.txt<pre><code>Feature: User Authentication\n\nRequirements:\n- Login with email/password\n- Password reset functionality\n- Session management\n- Two-factor authentication\n\nTechnical:\n- JWT tokens\n- BCrypt password hashing\n- Rate limiting\n</code></pre>"},{"location":"user-guide/processing-prds/#rich-text-rtf","title":"\u2705 Rich Text (.rtf)","text":"<p>Formatted documents from word processors:</p> <pre><code>{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}\n\\f0\\fs24 Feature: Dashboard Analytics\\par\nRequirements:\\par\n- Real-time data visualization\\par\n- Export capabilities\\par\n}\n</code></pre>"},{"location":"user-guide/processing-prds/#microsoft-word-docx","title":"\u2705 Microsoft Word (.docx)","text":"<p>Corporate standard format:</p> <ul> <li>Full formatting support</li> <li>Tables and lists preserved</li> <li>Images and diagrams extracted</li> <li>Comments and tracked changes processed</li> </ul>"},{"location":"user-guide/processing-prds/#prd-quality-guidelines","title":"\ud83c\udfaf PRD Quality Guidelines","text":""},{"location":"user-guide/processing-prds/#excellent-prd-structure","title":"Excellent PRD Structure","text":"excellent-prd.md<pre><code># Feature Name: Real-time Chat System\n\n## Business Context\nWhy this feature matters and its expected impact.\n\n## User Stories\n- As a user, I want to send messages instantly\n- As a moderator, I need to monitor chat content\n- As an admin, I want to manage chat rooms\n\n## Functional Requirements\n### Core Messaging\n- Send/receive text messages in real-time\n- Support for emoji and basic formatting\n- Message history persistence (30 days)\n- Typing indicators\n\n### Room Management  \n- Create public/private chat rooms\n- Invite users to private rooms\n- Room moderation controls\n- User presence indicators\n\n## Technical Requirements\n- WebSocket connections for real-time updates\n- Message encryption in transit\n- Database optimization for message history\n- Rate limiting (10 messages/minute per user)\n- Mobile-responsive design\n\n## Non-Functional Requirements\n- Response time: &lt; 100ms for message delivery\n- Concurrent users: Support 10,000 simultaneous connections\n- Uptime: 99.9% availability\n- Scalability: Horizontal scaling support\n\n## Security Considerations\n- Message content encryption\n- User authentication required\n- Anti-spam mechanisms\n- Content moderation hooks\n\n## Acceptance Criteria\n- [ ] Users can join/leave rooms instantly\n- [ ] Messages appear in real-time (&lt; 100ms)\n- [ ] Message history loads quickly (&lt; 2s)\n- [ ] Typing indicators work correctly\n- [ ] Rate limiting prevents spam\n- [ ] Mobile layout works on all devices\n- [ ] Encrypted message transmission\n</code></pre>"},{"location":"user-guide/processing-prds/#what-makes-this-excellent","title":"What Makes This Excellent:","text":"<p>\u2705 Clear Structure - Easy to parse sections \u2705 Specific Requirements - Detailed, measurable criteria \u2705 Technical Details - Performance and security specs \u2705 User Perspective - Stories explain the \"why\" \u2705 Acceptance Criteria - Testable outcomes</p>"},{"location":"user-guide/processing-prds/#processing-commands","title":"\ud83d\ude80 Processing Commands","text":""},{"location":"user-guide/processing-prds/#basic-processing","title":"Basic Processing","text":"<pre><code># Process single PRD\nmarvin process feature-request.md\n\n# Specify output directory\nmarvin process feature-request.md --output ./tasks/\n\n# Process multiple PRDs\nmarvin process *.md --output ./all-tasks/\n</code></pre>"},{"location":"user-guide/processing-prds/#advanced-processing","title":"Advanced Processing","text":"<pre><code># Include codebase analysis\nmarvin process feature-request.md --codebase ./src/ --output ./tasks/\n\n# Use custom configuration\nmarvin process feature-request.md --config ./team-config.toml\n\n# Specify output format\nmarvin process feature-request.md --format json --output ./tasks/\n\n# Dry run (no files created)\nmarvin process feature-request.md --dry-run --verbose\n</code></pre>"},{"location":"user-guide/processing-prds/#batch-processing","title":"Batch Processing","text":"<pre><code># Process all PRDs in directory\nmarvin process ./prds/ --output ./tasks/ --recursive\n\n# Process specific file types\nmarvin process ./docs/ --include \"*.md\" --include \"*.txt\" --output ./tasks/\n\n# Exclude certain files\nmarvin process ./docs/ --exclude \"*draft*\" --exclude \"*template*\"\n</code></pre>"},{"location":"user-guide/processing-prds/#understanding-analysis-output","title":"\ud83d\udcca Understanding Analysis Output","text":"<p>When you process a PRD, Marvin provides detailed analysis:</p>"},{"location":"user-guide/processing-prds/#console-output","title":"Console Output","text":"<pre><code>$ marvin process social-feed.md --output ./tasks/\n\n\ud83d\udd0d Analyzing PRD: social-feed.md\n\ud83d\udccb Extracted 12 requirements across 4 feature areas\n\ud83d\udd17 Identified 7 task dependencies\n\u26a1 Generated 6 optimized tasks\n\ud83d\udcc1 Output saved to: ./tasks/\n\n\ud83d\udcc8 Analysis Summary:\n   \u251c\u2500\u2500 Features identified: 4\n   \u251c\u2500\u2500 Technical requirements: 8  \n   \u251c\u2500\u2500 Business requirements: 4\n   \u251c\u2500\u2500 Tasks generated: 6\n   \u251c\u2500\u2500 Dependencies resolved: 7\n   \u2514\u2500\u2500 Estimated total effort: 18-24 hours\n\n\ud83d\udccb Generated Tasks:\n   \u251c\u2500\u2500 task_001_user_posts_data_model.xml (4h)\n   \u251c\u2500\u2500 task_002_engagement_system.xml (3h)\n   \u251c\u2500\u2500 task_003_real_time_updates.xml (5h)\n   \u251c\u2500\u2500 task_004_feed_display_logic.xml (4h)\n   \u251c\u2500\u2500 task_005_mobile_responsive_design.xml (2h)\n   \u2514\u2500\u2500 task_summary.json\n\n\u2705 Ready for AI coding assistants!\n</code></pre>"},{"location":"user-guide/processing-prds/#summary-file","title":"Summary File","text":"<p>Marvin generates a <code>task_summary.json</code> with analysis details:</p> task_summary.json<pre><code>{\n  \"prd_analysis\": {\n    \"source_file\": \"social-feed.md\",\n    \"processed_at\": \"2024-01-15T10:30:00Z\",\n    \"total_features\": 4,\n    \"total_requirements\": 12,\n    \"estimated_effort\": \"18-24 hours\"\n  },\n  \"tasks\": [\n    {\n      \"id\": \"task_001\",\n      \"title\": \"User Posts Data Model\",\n      \"priority\": \"high\",\n      \"effort\": \"3-4 hours\",\n      \"dependencies\": [\"user_auth\", \"database_setup\"]\n    }\n  ],\n  \"dependency_graph\": {\n    \"task_001\": [],\n    \"task_002\": [\"task_001\"],\n    \"task_003\": [\"task_001\", \"task_002\"]\n  },\n  \"recommendations\": [\n    \"Implement tasks in dependency order\",\n    \"Consider API rate limiting for engagement features\",\n    \"Optimize database queries for feed performance\"\n  ]\n}\n</code></pre>"},{"location":"user-guide/processing-prds/#codebase-integration","title":"\ud83d\udd27 Codebase Integration","text":""},{"location":"user-guide/processing-prds/#analyzing-existing-code","title":"Analyzing Existing Code","text":"<p>When you include <code>--codebase</code>, Marvin analyzes your existing code structure:</p> <pre><code>marvin process new-feature.md --codebase ./src/ --output ./tasks/\n</code></pre> <p>What Marvin Analyzes: - \ud83c\udfd7\ufe0f Architecture patterns (MVC, microservices, etc.) - \ud83d\udcc1 File structure and organization - \ud83d\udd0c Frameworks and libraries in use - \ud83d\uddc3\ufe0f Database models and schemas - \ud83d\udee0\ufe0f API patterns and conventions - \ud83e\uddea Testing approaches and frameworks</p>"},{"location":"user-guide/processing-prds/#enhanced-task-generation","title":"Enhanced Task Generation","text":"<p>With codebase analysis, tasks become more specific:</p> Without codebase analysis<pre><code>&lt;requirement&gt;Create user authentication API&lt;/requirement&gt;\n</code></pre> With codebase analysis<pre><code>&lt;requirement&gt;\n  Extend existing FastAPI auth module at src/auth/\n  following the established JWT pattern used in \n  src/auth/models.py and src/auth/routes.py\n&lt;/requirement&gt;\n</code></pre>"},{"location":"user-guide/processing-prds/#architecture-alignment","title":"Architecture Alignment","text":"<p>Marvin ensures new tasks fit your existing architecture:</p> <p>Django Project Detection</p> <pre><code>&lt;implementation_notes&gt;\n  &lt;note&gt;Use Django models extending AbstractUser&lt;/note&gt;\n  &lt;note&gt;Follow existing serializer patterns in api/serializers/&lt;/note&gt;\n  &lt;note&gt;Add tests to tests/test_auth.py following pytest conventions&lt;/note&gt;\n  &lt;note&gt;Use Django REST framework viewsets for consistency&lt;/note&gt;\n&lt;/implementation_notes&gt;\n</code></pre> <p>React Project Detection</p> <pre><code>&lt;implementation_notes&gt;\n  &lt;note&gt;Create components in src/components/ following existing structure&lt;/note&gt;\n  &lt;note&gt;Use existing Redux store pattern for state management&lt;/note&gt;\n  &lt;note&gt;Follow TypeScript interfaces defined in src/types/&lt;/note&gt;\n  &lt;note&gt;Add tests using existing Jest + React Testing Library setup&lt;/note&gt;\n&lt;/implementation_notes&gt;\n</code></pre>"},{"location":"user-guide/processing-prds/#optimization-tips","title":"\ud83d\udcc8 Optimization Tips","text":""},{"location":"user-guide/processing-prds/#better-requirements-better-tasks","title":"Better Requirements = Better Tasks","text":"\u274c Vague Requirements\u2705 Specific Requirements <pre><code>## Requirements\n- Users should be able to interact with content\n- The system should be fast\n- Make it secure\n</code></pre> <p>Result: Generic, non-actionable tasks</p> <pre><code>## Requirements\n- Users can like posts with real-time counter updates\n- Feed loads in &lt; 2 seconds for 1000+ posts\n- All API endpoints require JWT authentication\n- Rate limiting: 100 requests/minute per user\n</code></pre> <p>Result: Detailed, implementation-ready tasks</p>"},{"location":"user-guide/processing-prds/#include-context-and-constraints","title":"Include Context and Constraints","text":"<pre><code>## Technical Constraints\n- Must integrate with existing PostgreSQL database\n- Frontend uses React 18+ with TypeScript\n- Backend API follows OpenAPI 3.0 specification\n- All changes must maintain backward compatibility\n- Performance budget: &lt; 200ms API response time\n\n## Business Constraints  \n- Feature must launch before Q2 deadline\n- Budget allows for 40 development hours\n- Must support 10,000 concurrent users\n- Compliance with GDPR requirements\n</code></pre>"},{"location":"user-guide/processing-prds/#effective-user-stories","title":"Effective User Stories","text":"<pre><code>## User Stories\n\n### Primary Users (End Customers)\n- As a shopper, I want to save items for later so I can purchase them when ready\n- As a return customer, I want my cart to persist across devices\n- As a mobile user, I want the cart to work seamlessly on my phone\n\n### Secondary Users (Business Stakeholders)\n- As a product manager, I need cart abandonment analytics\n- As a marketing team member, I want to send cart reminder emails\n- As a customer service rep, I need to view customer cart contents\n\n### System Stories (Technical)\n- As the system, I need to sync cart data across user sessions\n- As the database, I need efficient queries for cart retrieval\n- As the API, I need to handle concurrent cart modifications\n</code></pre>"},{"location":"user-guide/processing-prds/#common-issues-and-solutions","title":"\ud83d\udea8 Common Issues and Solutions","text":""},{"location":"user-guide/processing-prds/#poor-task-generation","title":"Poor Task Generation","text":"Tasks are too generic <p>Problem: PRD lacks specific details</p> <p>Solution: - Add technical constraints and requirements - Include specific metrics and performance criteria - Provide examples of desired behavior - Specify integration points with existing systems</p> Missing dependencies <p>Problem: Tasks seem disconnected</p> <p>Solution: - Use <code>--codebase</code> flag to analyze existing code - Include system architecture in PRD - Specify data flow and component interactions - Add integration requirements</p> Wrong technology assumptions <p>Problem: Tasks suggest wrong frameworks</p> <p>Solution: - Include current tech stack in PRD - Use <code>--codebase</code> analysis - Add technical constraints section - Specify required tools and frameworks</p>"},{"location":"user-guide/processing-prds/#processing-errors","title":"Processing Errors","text":"Unable to parse PRD <p>Problem: File format or encoding issues</p> <p>Solution: <pre><code># Check file encoding\nfile social-feed.md\n\n# Convert if needed\niconv -f ISO-8859-1 -t UTF-8 input.md &gt; output.md\n\n# Use verbose mode for debugging\nmarvin process input.md --verbose\n</code></pre></p> Empty or minimal output <p>Problem: PRD doesn't contain enough structured information</p> <p>Solution: - Ensure PRD has clear headings and sections - Add more detailed requirements - Include acceptance criteria - Use markdown formatting for better parsing</p>"},{"location":"user-guide/processing-prds/#best-practices-summary","title":"\ud83d\udcda Best Practices Summary","text":""},{"location":"user-guide/processing-prds/#do-this","title":"\u2705 Do This","text":"<ul> <li>Use clear, descriptive headings</li> <li>Include specific, measurable requirements</li> <li>Add technical constraints and performance criteria</li> <li>Provide user stories for context</li> <li>Include acceptance criteria</li> <li>Use bullet points and lists for clarity</li> <li>Analyze your codebase with <code>--codebase</code> flag</li> </ul>"},{"location":"user-guide/processing-prds/#avoid-this","title":"\u274c Avoid This","text":"<ul> <li>Vague or generic requirements</li> <li>Missing technical details</li> <li>No acceptance criteria</li> <li>Unclear business context</li> <li>Mixing multiple features in one PRD</li> <li>Inconsistent formatting</li> <li>Ignoring existing code architecture</li> </ul> <p>Next: Understanding Generated Templates \u2192</p>"},{"location":"user-guide/templates/","title":"Understanding Generated Templates","text":"<p>Learn how to interpret and customize Marvin's task templates for maximum AI coding effectiveness.</p>"},{"location":"user-guide/templates/#template-structure","title":"\ud83d\udccb Template Structure","text":"<p>Marvin generates structured templates that provide AI coding assistants with comprehensive context. Here's what each section contains:</p>"},{"location":"user-guide/templates/#complete-template-anatomy","title":"Complete Template Anatomy","text":"Complete Task Template<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;coding_task&gt;\n  &lt;!-- \ud83c\udff7\ufe0f Metadata: Task identification and management --&gt;\n  &lt;metadata&gt;\n    &lt;task_id&gt;task_001&lt;/task_id&gt;\n    &lt;title&gt;User Authentication System&lt;/title&gt;\n    &lt;priority&gt;high&lt;/priority&gt;\n    &lt;estimated_effort&gt;4-6 hours&lt;/estimated_effort&gt;\n    &lt;created_from&gt;auth-feature.md&lt;/created_from&gt;\n    &lt;created_at&gt;2024-01-15T10:30:00Z&lt;/created_at&gt;\n  &lt;/metadata&gt;\n\n  &lt;!-- \ud83c\udfaf Context: Why this task exists and its business value --&gt;\n  &lt;context&gt;\n    &lt;description&gt;\n      Implement secure user authentication system with JWT tokens,\n      password hashing, and session management for the web application.\n    &lt;/description&gt;\n\n    &lt;business_value&gt;\n      Enables user account creation, secure login, and personalized\n      experiences. Foundation for all user-specific features.\n    &lt;/business_value&gt;\n\n    &lt;user_impact&gt;\n      Users can create accounts, log in securely, and maintain\n      sessions across browser restarts.\n    &lt;/user_impact&gt;\n  &lt;/context&gt;\n\n  &lt;!-- \u2705 Requirements: What needs to be built --&gt;\n  &lt;requirements&gt;\n    &lt;functional&gt;\n      &lt;requirement&gt;User registration with email and password&lt;/requirement&gt;\n      &lt;requirement&gt;Secure password hashing using bcrypt&lt;/requirement&gt;\n      &lt;requirement&gt;JWT token generation and validation&lt;/requirement&gt;\n      &lt;requirement&gt;Login endpoint with rate limiting&lt;/requirement&gt;\n      &lt;requirement&gt;Password reset via email&lt;/requirement&gt;\n      &lt;requirement&gt;User profile management&lt;/requirement&gt;\n    &lt;/functional&gt;\n\n    &lt;technical&gt;\n      &lt;requirement&gt;RESTful API design following OpenAPI spec&lt;/requirement&gt;\n      &lt;requirement&gt;Input validation and sanitization&lt;/requirement&gt;\n      &lt;requirement&gt;Error handling with appropriate HTTP codes&lt;/requirement&gt;\n      &lt;requirement&gt;Logging for security events&lt;/requirement&gt;\n      &lt;requirement&gt;Integration with existing database schema&lt;/requirement&gt;\n    &lt;/technical&gt;\n\n    &lt;security&gt;\n      &lt;requirement&gt;Password complexity enforcement&lt;/requirement&gt;\n      &lt;requirement&gt;Rate limiting on auth endpoints&lt;/requirement&gt;\n      &lt;requirement&gt;Secure token storage recommendations&lt;/requirement&gt;\n      &lt;requirement&gt;Protection against common attacks (CSRF, XSS)&lt;/requirement&gt;\n    &lt;/security&gt;\n  &lt;/requirements&gt;\n\n  &lt;!-- \ud83d\udd17 Dependencies: What must exist before this task --&gt;\n  &lt;dependencies&gt;\n    &lt;technical&gt;\n      &lt;dependency type=\"database\"&gt;User table schema&lt;/dependency&gt;\n      &lt;dependency type=\"service\"&gt;Email service configuration&lt;/dependency&gt;\n      &lt;dependency type=\"library\"&gt;JWT library installation&lt;/dependency&gt;\n    &lt;/technical&gt;\n\n    &lt;task&gt;\n      &lt;dependency task_id=\"task_000\"&gt;Database setup and migrations&lt;/dependency&gt;\n    &lt;/task&gt;\n  &lt;/dependencies&gt;\n\n  &lt;!-- \ud83c\udfaf Acceptance Criteria: How to know it's done --&gt;\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Users can register with valid email/password&lt;/criterion&gt;\n    &lt;criterion&gt;Login returns valid JWT token&lt;/criterion&gt;\n    &lt;criterion&gt;Protected routes verify JWT tokens&lt;/criterion&gt;\n    &lt;criterion&gt;Password reset flow works end-to-end&lt;/criterion&gt;\n    &lt;criterion&gt;Rate limiting prevents brute force attacks&lt;/criterion&gt;\n    &lt;criterion&gt;All inputs are properly validated&lt;/criterion&gt;\n    &lt;criterion&gt;Security logging captures auth events&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n\n  &lt;!-- \ud83d\udca1 Implementation Notes: Best practices and hints --&gt;\n  &lt;implementation_notes&gt;\n    &lt;note&gt;Use bcrypt with salt rounds of 12 for password hashing&lt;/note&gt;\n    &lt;note&gt;JWT tokens should expire after 24 hours&lt;/note&gt;\n    &lt;note&gt;Implement refresh token mechanism for better UX&lt;/note&gt;\n    &lt;note&gt;Store sensitive config in environment variables&lt;/note&gt;\n    &lt;note&gt;Consider using middleware for auth route protection&lt;/note&gt;\n  &lt;/implementation_notes&gt;\n\n  &lt;!-- \ud83e\uddea Testing Strategy: How to verify it works --&gt;\n  &lt;testing_strategy&gt;\n    &lt;unit_tests&gt;\n      &lt;test&gt;Password hashing and verification&lt;/test&gt;\n      &lt;test&gt;JWT token generation and validation&lt;/test&gt;\n      &lt;test&gt;Input validation for all fields&lt;/test&gt;\n      &lt;test&gt;Rate limiting logic&lt;/test&gt;\n    &lt;/unit_tests&gt;\n\n    &lt;integration_tests&gt;\n      &lt;test&gt;Registration flow end-to-end&lt;/test&gt;\n      &lt;test&gt;Login flow with database interaction&lt;/test&gt;\n      &lt;test&gt;Password reset email workflow&lt;/test&gt;\n      &lt;test&gt;Protected route access with tokens&lt;/test&gt;\n    &lt;/integration_tests&gt;\n\n    &lt;security_tests&gt;\n      &lt;test&gt;SQL injection attempts on auth endpoints&lt;/test&gt;\n      &lt;test&gt;Brute force attack simulation&lt;/test&gt;\n      &lt;test&gt;Token manipulation and validation&lt;/test&gt;\n    &lt;/security_tests&gt;\n  &lt;/testing_strategy&gt;\n\n  &lt;!-- \ud83c\udfd7\ufe0f Architecture Hints: Technical guidance --&gt;\n  &lt;architecture_hints&gt;\n    &lt;pattern&gt;Repository pattern for user data access&lt;/pattern&gt;\n    &lt;pattern&gt;Service layer for business logic&lt;/pattern&gt;\n    &lt;pattern&gt;Middleware for authentication checks&lt;/pattern&gt;\n    &lt;database&gt;Index on email field for fast lookups&lt;/database&gt;\n    &lt;caching&gt;Cache user sessions for performance&lt;/caching&gt;\n  &lt;/architecture_hints&gt;\n&lt;/coding_task&gt;\n</code></pre>"},{"location":"user-guide/templates/#why-this-structure-works-so-well","title":"\ud83c\udfaf Why This Structure Works So Well","text":""},{"location":"user-guide/templates/#ai-coding-assistant-benefits","title":"AI Coding Assistant Benefits","text":"\ud83e\udde0 Complete Context\ud83d\udccb Clear Requirements\ud83d\udd17 Dependency Awareness\u2705 Testable Outcomes <p>The Problem: AI tools often lack context about why code exists</p> <p>Marvin's Solution: - Business value explanation - User impact description - Technical constraints - Security considerations</p> <p>Result: AI generates purpose-driven code</p> <p>The Problem: Ambiguous prompts lead to generic solutions</p> <p>Marvin's Solution: - Functional requirements (what it does) - Technical requirements (how it works) - Security requirements (how it's protected)</p> <p>Result: AI builds exactly what's needed</p> <p>The Problem: AI doesn't know what already exists</p> <p>Marvin's Solution: - Technical dependencies listed - Related task connections - Integration points specified</p> <p>Result: AI builds compatible code</p> <p>The Problem: Hard to verify AI-generated code works</p> <p>Marvin's Solution: - Specific acceptance criteria - Comprehensive testing strategy - Security test considerations</p> <p>Result: AI includes proper testing</p>"},{"location":"user-guide/templates/#template-variations","title":"\ud83c\udfa8 Template Variations","text":""},{"location":"user-guide/templates/#output-formats","title":"Output Formats","text":"<p>Marvin supports multiple output formats for different use cases:</p> XML (Default)JSONMarkdownYAML <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Feature Implementation&lt;/title&gt;\n  &lt;requirements&gt;\n    &lt;requirement&gt;Detailed specification&lt;/requirement&gt;\n  &lt;/requirements&gt;\n&lt;/coding_task&gt;\n</code></pre> <p>Best for: Structured data, complex projects, enterprise use</p> <pre><code>{\n  \"task\": {\n    \"title\": \"Feature Implementation\",\n    \"requirements\": [\n      \"Detailed specification\"\n    ]\n  }\n}\n</code></pre> <p>Best for: API integration, automation scripts, modern tooling</p> <pre><code># Feature Implementation\n\n## Requirements\n- Detailed specification\n\n## Acceptance Criteria\n- [ ] Criterion 1\n</code></pre> <p>Best for: Documentation, GitHub issues, lightweight projects</p> <pre><code>task:\n  title: \"Feature Implementation\"\n  requirements:\n    - \"Detailed specification\"\n  acceptance_criteria:\n    - \"Criterion 1\"\n</code></pre> <p>Best for: DevOps workflows, configuration-driven projects</p>"},{"location":"user-guide/templates/#complexity-levels","title":"Complexity Levels","text":"<p>Templates adapt to task complexity:</p> Simple TaskComplex Task <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Add validation to user form&lt;/title&gt;\n  &lt;requirements&gt;\n    &lt;requirement&gt;Email format validation&lt;/requirement&gt;\n    &lt;requirement&gt;Required field checking&lt;/requirement&gt;\n  &lt;/requirements&gt;\n  &lt;acceptance_criteria&gt;\n    &lt;criterion&gt;Invalid emails show error&lt;/criterion&gt;\n    &lt;criterion&gt;Required fields prevent submission&lt;/criterion&gt;\n  &lt;/acceptance_criteria&gt;\n&lt;/coding_task&gt;\n</code></pre> <pre><code>&lt;coding_task&gt;\n  &lt;title&gt;Real-time chat system&lt;/title&gt;\n  &lt;requirements&gt;\n    &lt;functional&gt;\n      &lt;requirement&gt;WebSocket connections&lt;/requirement&gt;\n      &lt;requirement&gt;Message persistence&lt;/requirement&gt;\n      &lt;requirement&gt;Room management&lt;/requirement&gt;\n    &lt;/functional&gt;\n    &lt;technical&gt;\n      &lt;requirement&gt;Horizontal scaling support&lt;/requirement&gt;\n      &lt;requirement&gt;Message encryption&lt;/requirement&gt;\n      &lt;requirement&gt;Performance monitoring&lt;/requirement&gt;\n    &lt;/technical&gt;\n  &lt;/requirements&gt;\n  &lt;!-- ... extensive details ... --&gt;\n&lt;/coding_task&gt;\n</code></pre>"},{"location":"user-guide/templates/#customizing-templates","title":"\ud83d\udd27 Customizing Templates","text":""},{"location":"user-guide/templates/#custom-template-creation","title":"Custom Template Creation","text":"<p>Create your own templates to match your workflow:</p> templates/my-custom-task.xml.j2<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;{{ company_name|lower }}_task&gt;\n  &lt;metadata&gt;\n    &lt;id&gt;{{ task.id }}&lt;/id&gt;\n    &lt;title&gt;{{ task.title }}&lt;/title&gt;\n    &lt;epic&gt;{{ task.epic }}&lt;/epic&gt;\n    &lt;sprint&gt;{{ current_sprint }}&lt;/sprint&gt;\n    &lt;assignee&gt;{{ default_assignee }}&lt;/assignee&gt;\n  &lt;/metadata&gt;\n\n  &lt;description&gt;{{ task.description }}&lt;/description&gt;\n\n  &lt;!-- Company-specific sections --&gt;\n  &lt;business_impact&gt;{{ task.business_impact }}&lt;/business_impact&gt;\n  &lt;risk_assessment&gt;{{ task.risk_level }}&lt;/risk_assessment&gt;\n  &lt;compliance_notes&gt;{{ task.compliance_requirements }}&lt;/compliance_notes&gt;\n\n  &lt;requirements&gt;\n    {% for req in task.requirements %}\n    &lt;requirement priority=\"{{ req.priority }}\"&gt;{{ req.text }}&lt;/requirement&gt;\n    {% endfor %}\n  &lt;/requirements&gt;\n\n  &lt;!-- Custom testing requirements --&gt;\n  &lt;testing&gt;\n    &lt;unit_test_coverage&gt;{{ company_standards.test_coverage }}%&lt;/unit_test_coverage&gt;\n    &lt;performance_benchmarks&gt;\n      {% for benchmark in task.performance_requirements %}\n      &lt;benchmark&gt;{{ benchmark }}&lt;/benchmark&gt;\n      {% endfor %}\n    &lt;/performance_benchmarks&gt;\n  &lt;/testing&gt;\n\n  &lt;!-- Deployment considerations --&gt;\n  &lt;deployment&gt;\n    &lt;environment&gt;{{ target_environment }}&lt;/environment&gt;\n    &lt;rollback_plan&gt;{{ task.rollback_strategy }}&lt;/rollback_plan&gt;\n    &lt;monitoring&gt;{{ task.monitoring_requirements }}&lt;/monitoring&gt;\n  &lt;/deployment&gt;\n&lt;/{{ company_name|lower }}_task&gt;\n</code></pre>"},{"location":"user-guide/templates/#template-variables","title":"Template Variables","text":"<p>Customize templates with dynamic content:</p> marvin.toml<pre><code>[project]\ncompany_name = \"TechCorp\"\ndefault_assignee = \"unassigned\" \ncurrent_sprint = \"Sprint 23\"\ntarget_environment = \"staging\"\n\n[company_standards]\ntest_coverage = 85\ncode_review_required = true\nsecurity_scan_required = true\n\n[custom_sections]\ninclude_business_impact = true\ninclude_risk_assessment = true\ninclude_compliance_notes = true\n</code></pre>"},{"location":"user-guide/templates/#conditional-sections","title":"Conditional Sections","text":"<p>Show/hide template sections based on task properties:</p> Smart Template with Conditions<pre><code>&lt;coding_task&gt;\n  &lt;title&gt;{{ task.title }}&lt;/title&gt;\n\n  {% if task.priority == \"high\" %}\n  &lt;urgency_notes&gt;\n    &lt;note&gt;High priority task - coordinate with team lead&lt;/note&gt;\n    &lt;note&gt;Consider pair programming for faster delivery&lt;/note&gt;\n  &lt;/urgency_notes&gt;\n  {% endif %}\n\n  {% if task.has_security_requirements %}\n  &lt;security_requirements&gt;\n    {% for req in task.security_requirements %}\n    &lt;requirement&gt;{{ req }}&lt;/requirement&gt;\n    {% endfor %}\n  &lt;/security_requirements&gt;\n  {% endif %}\n\n  {% if task.estimated_effort &gt; \"8 hours\" %}\n  &lt;breakdown_suggestion&gt;\n    &lt;note&gt;Consider breaking this task into smaller subtasks&lt;/note&gt;\n    &lt;note&gt;Implement in phases with intermediate testing&lt;/note&gt;\n  &lt;/breakdown_suggestion&gt;\n  {% endif %}\n&lt;/coding_task&gt;\n</code></pre>"},{"location":"user-guide/templates/#using-templates-with-ai-tools","title":"\ud83d\ude80 Using Templates with AI Tools","text":""},{"location":"user-guide/templates/#best-practices-for-ai-prompts","title":"Best Practices for AI Prompts","text":"\u274c Poor AI Prompt\u2705 Excellent AI Prompt <pre><code>\"Build a user authentication system\"\n</code></pre> <p>Problems: - Too vague - No context - No constraints - No testing guidance</p> <pre><code>Please implement this coding task following the XML specification exactly:\n\n[Full XML template content here]\n\nAdditional context:\n- This is for a Django REST API project\n- Use the existing User model in models.py\n- Follow our established patterns in auth/views.py\n- Include comprehensive tests as specified\n</code></pre> <p>Benefits: - Complete context - Specific requirements - Clear testing strategy - Integration guidance</p>"},{"location":"user-guide/templates/#ai-tool-optimization","title":"AI Tool Optimization","text":"Cursor IntegrationWindsurf IntegrationClaude Code Integration <pre><code># Generate Cursor-optimized templates\nmarvin process prd.md --target-ai cursor --output ./tasks/\n</code></pre> <p>Cursor-specific optimizations: - File structure suggestions - Import recommendations - Code context references - Maximum 8K context length</p> <pre><code># Generate Windsurf-optimized templates\nmarvin process prd.md --target-ai windsurf --output ./tasks/\n</code></pre> <p>Windsurf-specific optimizations: - Workflow step breakdown - Git commit suggestions - Collaboration notes - Maximum 12K context length</p> <pre><code># Generate Claude Code-optimized templates\nmarvin process prd.md --target-ai claude-code --output ./tasks/\n</code></pre> <p>Claude Code-specific optimizations: - Error handling emphasis - Testing examples included - Documentation generation hints - Maximum 15K context length</p>"},{"location":"user-guide/templates/#template-quality-indicators","title":"\ud83d\udcca Template Quality Indicators","text":""},{"location":"user-guide/templates/#high-quality-template-checklist","title":"High-Quality Template Checklist","text":"<p>\u2705 Context &amp; Purpose - [ ] Clear business value explanation - [ ] User impact description - [ ] Technical context provided</p> <p>\u2705 Requirements Clarity - [ ] Functional requirements are specific - [ ] Technical constraints are detailed - [ ] Security considerations included</p> <p>\u2705 Dependency Management - [ ] All dependencies identified - [ ] Task order is logical - [ ] Integration points specified</p> <p>\u2705 Testability - [ ] Acceptance criteria are measurable - [ ] Testing strategy is comprehensive - [ ] Security tests included</p> <p>\u2705 Implementation Guidance - [ ] Best practices noted - [ ] Architecture patterns suggested - [ ] Performance considerations included</p>"},{"location":"user-guide/templates/#quality-metrics","title":"Quality Metrics","text":"<p>Marvin tracks template quality:</p> Quality Assessment<pre><code>{\n  \"template_quality\": {\n    \"overall_score\": 92,\n    \"completeness\": 95,\n    \"specificity\": 89,\n    \"testability\": 94,\n    \"clarity\": 90\n  },\n  \"recommendations\": [\n    \"Add more specific performance requirements\",\n    \"Include error handling scenarios\",\n    \"Consider edge cases in acceptance criteria\"\n  ],\n  \"ai_readiness\": \"excellent\"\n}\n</code></pre>"},{"location":"user-guide/templates/#template-analysis-tools","title":"\ud83d\udd0d Template Analysis Tools","text":""},{"location":"user-guide/templates/#built-in-analysis","title":"Built-in Analysis","text":"<pre><code># Analyze template quality\nmarvin analyze-template task_001.xml\n\n# Compare templates\nmarvin compare-templates task_001.xml task_002.xml\n\n# Validate template structure\nmarvin validate-template task_001.xml\n</code></pre>"},{"location":"user-guide/templates/#template-metrics","title":"Template Metrics","text":"<pre><code>$ marvin analyze-template task_001.xml\n\n\ud83d\udcca Template Analysis: task_001.xml\n\nQuality Score: 92/100 (Excellent)\n\n\ud83d\udccb Content Analysis:\n   \u251c\u2500\u2500 Requirements: 12 (specific and actionable)\n   \u251c\u2500\u2500 Dependencies: 4 (all identified)\n   \u251c\u2500\u2500 Acceptance Criteria: 8 (measurable)\n   \u251c\u2500\u2500 Implementation Notes: 6 (helpful)\n   \u2514\u2500\u2500 Test Coverage: 15 test cases\n\n\ud83c\udfaf AI Readiness: Excellent\n   \u251c\u2500\u2500 Context completeness: 95%\n   \u251c\u2500\u2500 Requirement specificity: 89%\n   \u251c\u2500\u2500 Testability score: 94%\n   \u2514\u2500\u2500 Implementation guidance: 92%\n\n\ud83d\udca1 Recommendations:\n   \u251c\u2500\u2500 Add error handling scenarios\n   \u251c\u2500\u2500 Include performance benchmarks\n   \u2514\u2500\u2500 Consider mobile-specific requirements\n\n\u2705 Ready for AI coding assistants!\n</code></pre>"},{"location":"user-guide/templates/#common-template-issues","title":"\ud83d\udea8 Common Template Issues","text":""},{"location":"user-guide/templates/#fixing-poor-templates","title":"Fixing Poor Templates","text":"Template is too generic <p>Problem: Requirements are vague and non-specific</p> <p>Solution: - Include specific metrics and constraints - Add technical implementation details - Provide concrete examples - Use quantifiable acceptance criteria</p> Missing context <p>Problem: AI doesn't understand the purpose</p> <p>Solution: - Add business value explanation - Include user impact description - Provide technical background - Explain integration requirements</p> No testing guidance <p>Problem: Generated code lacks proper tests</p> <p>Solution: - Include comprehensive testing strategy - Specify test types needed - Add security testing requirements - Provide test case examples</p>"},{"location":"user-guide/templates/#template-validation","title":"Template Validation","text":"<pre><code># Check template structure\nmarvin validate-template task.xml\n\n# Common validation errors:\n# \u274c Missing required sections\n# \u274c Invalid XML syntax\n# \u274c Empty requirement lists\n# \u274c Circular dependencies\n# \u274c Unmeasurable acceptance criteria\n</code></pre>"},{"location":"user-guide/templates/#template-library","title":"\ud83d\udcda Template Library","text":""},{"location":"user-guide/templates/#built-in-templates","title":"Built-in Templates","text":"<p>Marvin includes templates for common scenarios:</p> <ul> <li>\ud83d\udd10 Authentication Systems - Login, registration, password reset</li> <li>\ud83d\udcca Data Management - CRUD operations, APIs, database models  </li> <li>\ud83c\udfa8 UI Components - Forms, tables, modals, responsive layouts</li> <li>\u26a1 Real-time Features - WebSockets, notifications, live updates</li> <li>\ud83d\udd0c Integrations - Third-party APIs, payment systems, email services</li> <li>\ud83e\uddea Testing Infrastructure - Unit tests, integration tests, E2E tests</li> </ul>"},{"location":"user-guide/templates/#community-templates","title":"Community Templates","text":"<p>Share and discover templates:</p> <pre><code># Browse community templates\nmarvin templates browse\n\n# Install community template\nmarvin templates install auth-system-advanced\n\n# Share your template\nmarvin templates publish my-custom-template\n</code></pre> <p>Next: CLI Usage Guide \u2192</p>"}]}