name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-((alpha|beta|rc)\.[0-9]+))?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-alpha.N or X.Y.Z-beta.N or X.Y.Z-rc.N"
            exit 1
          fi

      - name: Check if pre-release
        id: check_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "$VERSION" =~ -(alpha|beta|rc) ]] || [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Verify version consistency
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          INIT_VERSION=$(grep '^__version__ = ' src/marvin/__init__.py | cut -d'"' -f2)
          
          echo "Expected version: $VERSION"
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "__init__.py version: $INIT_VERSION"
          
          if [[ "$VERSION" != "$PYPROJECT_VERSION" ]] || [[ "$VERSION" != "$INIT_VERSION" ]]; then
            echo "Version mismatch! Please ensure all version files are updated."
            exit 1
          fi

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run tests
        run: |
          source .venv/bin/activate
          uv run pytest -v --cov=marvin --cov-report=term-missing

      - name: Run linting
        run: |
          source .venv/bin/activate
          uv run ruff check src tests
          uv run mypy src

      - name: Build package
        run: |
          source .venv/bin/activate
          uv run python -m build

      - name: Check package
        run: |
          source .venv/bin/activate
          uv run twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 5

  create-release:
    needs: [validate-version, build-and-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Extract the changelog section for this version
          CHANGELOG=$(awk -v version="$VERSION" '
            /^## \[/ {
              if (found) exit;
              if ($2 == "["version"]") found=1
            }
            found && /^## \[/ && $2 != "["version"]" {exit}
            found {print}
          ' CHANGELOG.md)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changelog entry found for version $VERSION"
          fi
          
          # Write to file for release notes
          echo "$CHANGELOG" > release_notes.md
          echo "Release notes written to release_notes.md"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          name: v${{ needs.validate-version.outputs.version }}
          tag: v${{ needs.validate-version.outputs.version }}
          bodyFile: release_notes.md
          artifacts: dist/*
          prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}
          generateReleaseNotes: true
          draft: false
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: [validate-version, create-release]
    if: needs.validate-version.outputs.is_prerelease == 'false'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/marvin/
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true

  publish-test-pypi:
    needs: [validate-version, create-release]
    if: needs.validate-version.outputs.is_prerelease == 'true'
    runs-on: ubuntu-latest
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/marvin/
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  update-docs:
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mike

      - name: Deploy versioned docs
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Deploy versioned docs
          mike deploy --push --update-aliases $VERSION latest
          
          # Set as default if it's not a pre-release
          if [[ "${{ needs.validate-version.outputs.is_prerelease }}" == "false" ]]; then
            mike set-default --push latest
          fi