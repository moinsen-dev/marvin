[project]
name = "marvin"
version = "0.1.0"
description = "An intelligent tool for converting PRDs into structured AI-Coding-Tasks"
authors = [{ name = "Moinsen Dev Team", email = "hello@moinsen.dev" }]
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = ["prd", "ai", "coding", "assistant", "template", "generator", "cursor", "windsurf", "claude"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup :: XML",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Framework :: FastAPI",
    "Natural Language :: English",
]
dependencies = [
    "fastapi>=0.115.12",
    "uvicorn>=0.34.2",
    "typer>=0.15.3",
    "pydantic>=2.11.4",
    "lxml>=5.4.0",
    "beautifulsoup4>=4.13.4",
    "google-adk>=0.4.0",
    "rich>=14.0.0",
    "langchain>=0.3.25",
    "PyYAML>=6.0.2",
    "websockets>=15.0.1",
    "loguru>=0.7.3",
    "types-pyyaml>=6.0.12.20250402",
    "networkx>=3.4.2",
]

[project.urls]
Homepage = "https://moinsen-dev.github.io/marvin/"
Documentation = "https://moinsen-dev.github.io/marvin/"
Repository = "https://github.com/moinsen-dev/marvin"
Issues = "https://github.com/moinsen-dev/marvin/issues"
Changelog = "https://github.com/moinsen-dev/marvin/blob/develop/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.2",
    "black>=24.2.0",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "ruff>=0.2.2",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.4",
    "pytest-xdist>=3.5.0",  # For parallel test execution
    "pytest-mock>=3.12.0",  # For better mocking
    "httpx>=0.27.0",  # For testing FastAPI
    "pytest-timeout>=2.2.0",  # For test timeouts
    "coverage[toml]>=7.4.0",  # For coverage reports
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.47",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-mermaid2-plugin>=1.1.1",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-awesome-pages-plugin>=2.10.1",
    "mike>=2.1.3",  # For versioning
]

[project.scripts]
marvin = "marvin.cli:app"

[build-system]
requires = ["setuptools>=68.2.0", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Changed to false for now
disallow_incomplete_defs = false  # Changed to false for now
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function call in argument defaults
    "B024",  # abstract base class without abstract methods
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=marvin",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=100",  # Enforce 100% test coverage
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["src/marvin"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/site-packages/*",
    "*/.tox/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if 0:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
